{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/lint.png","path":"images/lint.png","modified":0,"renderable":0},{"_id":"source/images/logo.jpeg","path":"images/logo.jpeg","modified":0,"renderable":0},{"_id":"source/images/top.png","path":"images/top.png","modified":0,"renderable":0},{"_id":"source/images/vuecli.png","path":"images/vuecli.png","modified":0,"renderable":0},{"_id":"source/images/weixin.png","path":"images/weixin.png","modified":0,"renderable":0},{"_id":"source/images/zhifubao.png","path":"images/zhifubao.png","modified":0,"renderable":0},{"_id":"source/images/eslint.png","path":"images/eslint.png","modified":0,"renderable":0},{"_id":"source/images/prettier.png","path":"images/prettier.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-drops/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.css","path":"css/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.eot","path":"css/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.js","path":"css/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.json","path":"css/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.ttf","path":"css/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.svg","path":"css/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.woff2","path":"css/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.woff","path":"css/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/lock-bg.png","path":"css/images/lock-bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/playbar.png","path":"css/images/playbar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/nature.jpg","path":"css/images/nature.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/cover.jpg","path":"css/images/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/drops.jpg","path":"css/images/drops.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/drops2.jpg","path":"css/images/drops2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/sprite.png","path":"css/images/sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-drops/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/iframe-example.png","path":"images/iframe-example.png","modified":0,"renderable":0},{"_id":"source/images/huhu.png","path":"images/huhu.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-drops/README.md","hash":"4d6397b52ee23610f4a25d82496c1efaf3db005a","modified":1579509184442},{"_id":"themes/hexo-theme-drops/_config.yml","hash":"9b31189cddae829035a063990d9df063304481d0","modified":1579510672916},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1579510029043},{"_id":"source/_posts/vue项目中使用eslint-prettier规范与检查代码.md","hash":"49b020a8dd2e0868c87a8d68bea5424aba5230be","modified":1579591983701},{"_id":"source/_posts/vue 组件内嵌套外部页面的实现与案例分享.md","hash":"df778e91a53420d29ab57789687211a7c3870316","modified":1579590081107},{"_id":"source/images/favicon.ico","hash":"166907605ffff456125b4978bb81eca715cc1bb9","modified":1579510029048},{"_id":"source/images/lint.png","hash":"678c2de3397fef61f0abdd87579441b57b738d1c","modified":1579510029059},{"_id":"source/images/logo.jpeg","hash":"037ebeaa24db27cf039ad42e9887c4b63e7c0e61","modified":1579510029060},{"_id":"source/images/top.png","hash":"413700042fdd69144c69870df2a7a5e811d5baae","modified":1579510029062},{"_id":"source/images/vuecli.png","hash":"eaf210444a1ea41846bb835a9cfbfb953bfa46bf","modified":1579510029063},{"_id":"source/images/weixin.png","hash":"fb6200b64e5812aba2c092916af296bf3ed27873","modified":1579510029064},{"_id":"source/images/zhifubao.png","hash":"e5e934956dadfd3e65c48131f0c6b7d42ccf0c6c","modified":1579510029065},{"_id":"themes/hexo-theme-drops/languages/zh-CN.yml","hash":"3558eae45d94a322f026202e8fd9f160b22bf4be","modified":1579510646323},{"_id":"themes/hexo-theme-drops/languages/default.yml","hash":"eb20ff415211180a012ccb75dc7cee34fe155aa7","modified":1579509184445},{"_id":"themes/hexo-theme-drops/layout/archive.ejs","hash":"68c6d333a0c459bca2ed16dac25bbe7f295fc053","modified":1579509184452},{"_id":"themes/hexo-theme-drops/layout/index.ejs","hash":"47a98541d7c1e2d2a7989d1ef80e4294b2cda7d4","modified":1579511818496},{"_id":"themes/hexo-theme-drops/layout/layout.ejs","hash":"6c0ec5330f814a3528b0de9691f726c32d6f02b8","modified":1579575353308},{"_id":"themes/hexo-theme-drops/layout/post.ejs","hash":"2e434c67244befc4bf7f5dff8396b65e1c2b8899","modified":1579569239804},{"_id":"source/images/eslint.png","hash":"5bd6db28753c5808d83a2caa9de9981d12505367","modified":1579510029047},{"_id":"source/images/prettier.png","hash":"3a742cc258f15cbf1b51afc3ab1f9c8679e15a99","modified":1579510029061},{"_id":"themes/hexo-theme-drops/layout/_partial/copyright.ejs","hash":"4a65e8e5633d857e21966bbbf114c22ca1947ce5","modified":1579510954295},{"_id":"themes/hexo-theme-drops/layout/_partial/paginator.ejs","hash":"3af6d61e116c7629f6227ce1ad719de9337638dd","modified":1579509184451},{"_id":"themes/hexo-theme-drops/layout/_partial/head.ejs","hash":"b03c53d3391fca6b3913c5da8a825efc8fdbdcde","modified":1579509184449},{"_id":"themes/hexo-theme-drops/layout/_partial/header.ejs","hash":"0af786241bc8a3066093bbc8e08cd4971fde624f","modified":1579509184450},{"_id":"themes/hexo-theme-drops/layout/_partial/sidebar.ejs","hash":"5cb6e7e228f5f6a3922227b440e6695b2b126019","modified":1579511020956},{"_id":"themes/hexo-theme-drops/source/css/style.styl","hash":"216b82d4aa9cc2c0152efa9db2f1bd16652d512d","modified":1579590481498},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.css","hash":"5c79e26468626d5f48fff62856d44790f5ff54b6","modified":1579510838442},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.eot","hash":"83bf65bd23f54a50fbd5f3a97a2d40bbea55be8a","modified":1579510838455},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.js","hash":"6791a4702f702b97bdad4f0d4387180370f94626","modified":1579510838458},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.json","hash":"8998a1263ca1dce5b19b745f1d6f650ba2d7dd99","modified":1579510838462},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.ttf","hash":"9d1b0417110af8ba003369f3bb78e5651ca757b7","modified":1579510838474},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.svg","hash":"efb22169cfd2eab50c8c43101e5ad06f822eef63","modified":1579510838471},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.woff2","hash":"50c81f9acbb4cbf545c49a3b738b0b62340aa82a","modified":1579510838480},{"_id":"themes/hexo-theme-drops/source/css/iconfont/iconfont.woff","hash":"e32b2517c2a7e40ba27747417de7dc3f312a8883","modified":1579510838477},{"_id":"themes/hexo-theme-drops/source/css/_partial/archive.styl","hash":"fd944d85d23382f62d2e25805ff52aaf83a12dd4","modified":1579509184458},{"_id":"themes/hexo-theme-drops/source/css/_partial/copyright.styl","hash":"6eede3c067e805e36aa120f6ebd00330c8118b3b","modified":1579510930784},{"_id":"themes/hexo-theme-drops/source/css/_partial/highlight.styl","hash":"5c9d8002bd202989002374476c04753517704c73","modified":1579578255679},{"_id":"themes/hexo-theme-drops/source/css/_partial/header.styl","hash":"cfc616a87c55aaf4bc659f243c758eb5e36914f0","modified":1579509184459},{"_id":"themes/hexo-theme-drops/source/css/_partial/index.styl","hash":"cae4b86ec430e7d28844339a65c57bceb1377c1a","modified":1579512072885},{"_id":"themes/hexo-theme-drops/source/css/_partial/post.styl","hash":"4a217d38e8300ac9b9c522030a8227a26e80548a","modified":1579591922937},{"_id":"themes/hexo-theme-drops/source/css/_partial/sidebar.styl","hash":"cf4db66ad2eb7244da89dff1cea3f9b4ac4968ef","modified":1579511030979},{"_id":"themes/hexo-theme-drops/source/css/images/avatar.jpg","hash":"78be7513fd485f335ecf25fa3961db09a02bfdf3","modified":1579510855869},{"_id":"themes/hexo-theme-drops/source/css/images/lock-bg.png","hash":"d45de44ae7fe1f2098cf647d58fa57b3366cb68e","modified":1579511632986},{"_id":"themes/hexo-theme-drops/source/css/images/playbar.png","hash":"ee821ceecd626f8a8f06afafa3d3518c3b9fa77c","modified":1579510855869},{"_id":"themes/hexo-theme-drops/source/css/images/nature.jpg","hash":"73f24f27b348cc6c5fde0ffc0d25ae25a9b3a8e4","modified":1579510855870},{"_id":"themes/hexo-theme-drops/source/css/images/cover.jpg","hash":"9424932974da1ed2fdea7e3e1f5c1d4b95ae5fad","modified":1579510855870},{"_id":"themes/hexo-theme-drops/source/css/images/drops.jpg","hash":"715a839da8d7a95065ed2a85e713e5ae199a0e44","modified":1579510855869},{"_id":"themes/hexo-theme-drops/source/css/images/drops2.jpg","hash":"3f4c1eaaa9cc37866282eb6b86f7919c9f7c364b","modified":1579510855870},{"_id":"themes/hexo-theme-drops/source/css/images/sprite.png","hash":"6c94ba11666bb25a3e5cdb9fb37e8bcb3b46ea16","modified":1579510855872},{"_id":"themes/hexo-theme-drops/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579509184473},{"_id":"source/images/iframe-example.png","hash":"ce1620c8ff14e8c4614e46ec3cfddf05b5e0fa72","modified":1579510029057},{"_id":"source/images/huhu.png","hash":"c6edcdd4eb5ce273044da9028cb6b69b5ff6d351","modified":1579510029053},{"_id":"public/2020/01/20/vue 组件内嵌套外部页面的实现与案例分享/index.html","hash":"24540e59e2302f023dd4d77f2e1884aa79dfec58","modified":1579590773354},{"_id":"public/2020/01/20/hello-world/index.html","hash":"f94c114c39bd0a97f03c9d73364a022503abfb38","modified":1579590773354},{"_id":"public/archives/index.html","hash":"7401d85814e1b28047854f898c52f80455298893","modified":1579590773354},{"_id":"public/archives/2020/index.html","hash":"7401d85814e1b28047854f898c52f80455298893","modified":1579590773354},{"_id":"public/archives/2020/01/index.html","hash":"7401d85814e1b28047854f898c52f80455298893","modified":1579590773354},{"_id":"public/index.html","hash":"a6b3eebe7c16aa74f65f7d9110347a12fdf012be","modified":1579590773354},{"_id":"public/2020/01/16/vue项目中使用eslint-prettier规范与检查代码/index.html","hash":"696652aed0c777034c465829b2053abd717a4a3c","modified":1579592010840},{"_id":"public/images/favicon.ico","hash":"166907605ffff456125b4978bb81eca715cc1bb9","modified":1579590773354},{"_id":"public/images/logo.jpeg","hash":"037ebeaa24db27cf039ad42e9887c4b63e7c0e61","modified":1579590773354},{"_id":"public/images/lint.png","hash":"678c2de3397fef61f0abdd87579441b57b738d1c","modified":1579590773354},{"_id":"public/images/vuecli.png","hash":"eaf210444a1ea41846bb835a9cfbfb953bfa46bf","modified":1579590773354},{"_id":"public/images/weixin.png","hash":"fb6200b64e5812aba2c092916af296bf3ed27873","modified":1579590773354},{"_id":"public/images/top.png","hash":"413700042fdd69144c69870df2a7a5e811d5baae","modified":1579590773354},{"_id":"public/images/zhifubao.png","hash":"e5e934956dadfd3e65c48131f0c6b7d42ccf0c6c","modified":1579590773354},{"_id":"public/images/eslint.png","hash":"5bd6db28753c5808d83a2caa9de9981d12505367","modified":1579590773354},{"_id":"public/images/prettier.png","hash":"3a742cc258f15cbf1b51afc3ab1f9c8679e15a99","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.eot","hash":"83bf65bd23f54a50fbd5f3a97a2d40bbea55be8a","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.ttf","hash":"9d1b0417110af8ba003369f3bb78e5651ca757b7","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.svg","hash":"efb22169cfd2eab50c8c43101e5ad06f822eef63","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.woff2","hash":"50c81f9acbb4cbf545c49a3b738b0b62340aa82a","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.woff","hash":"e32b2517c2a7e40ba27747417de7dc3f312a8883","modified":1579590773354},{"_id":"public/css/images/avatar.jpg","hash":"78be7513fd485f335ecf25fa3961db09a02bfdf3","modified":1579590773354},{"_id":"public/css/images/lock-bg.png","hash":"d45de44ae7fe1f2098cf647d58fa57b3366cb68e","modified":1579590773354},{"_id":"public/css/images/playbar.png","hash":"ee821ceecd626f8a8f06afafa3d3518c3b9fa77c","modified":1579590773354},{"_id":"public/css/images/nature.jpg","hash":"73f24f27b348cc6c5fde0ffc0d25ae25a9b3a8e4","modified":1579590773354},{"_id":"public/css/style.css","hash":"8c4a562354f86af056b14579f2d4be53a9dddb5a","modified":1579590773354},{"_id":"public/css/images/drops2.jpg","hash":"3f4c1eaaa9cc37866282eb6b86f7919c9f7c364b","modified":1579590773354},{"_id":"public/css/images/drops.jpg","hash":"715a839da8d7a95065ed2a85e713e5ae199a0e44","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.css","hash":"5c79e26468626d5f48fff62856d44790f5ff54b6","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.json","hash":"3f99351e547fc973015c4d2e8e4b952684c47f51","modified":1579590773354},{"_id":"public/css/iconfont/iconfont.js","hash":"6791a4702f702b97bdad4f0d4387180370f94626","modified":1579590773354},{"_id":"public/css/images/sprite.png","hash":"6c94ba11666bb25a3e5cdb9fb37e8bcb3b46ea16","modified":1579590773354},{"_id":"public/css/images/cover.jpg","hash":"9424932974da1ed2fdea7e3e1f5c1d4b95ae5fad","modified":1579590773354},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579590773354},{"_id":"public/images/iframe-example.png","hash":"ce1620c8ff14e8c4614e46ec3cfddf05b5e0fa72","modified":1579590773354},{"_id":"public/images/huhu.png","hash":"c6edcdd4eb5ce273044da9028cb6b69b5ff6d351","modified":1579590773354}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-01-20T08:47:09.043Z","updated":"2020-01-20T08:47:09.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5njk9u10000l4w23zfb4x8b","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">\"My New Post\"</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">\"My New Post\"</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"vue项目中使用eslint+prettier规范与检查代码","date":"2020-01-16T09:54:10.000Z","_content":"\n### 1.前言\n\n> &emsp;&emsp;在团队协作中，为避免低级 Bug、以及团队协作时不同代码风格对彼此造成的困扰与影响，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。EsLint 则是其中一个很好的工具。\n>\n> EsLint 提供以下支持：\n>\n> - ES6\n> - AngularJS\n> - JSX\n> - Style 检查\n> - 自定义错误和提示\n>\n> EsLint 提供以下几种校验：\n>\n> - 语法错误校验\n> - 不重要或丢失的标点符号，如分号\n> - 未被使用的参数提醒\n> - 漏掉的结束符，如}\n> - 确保样式的统一规则，如 sass 或者 less\n> - 检查变量的命名\n> - 影响性能的代码提醒，如 v-if 和 v-for 同时使用\n\n### 2.eslint 配置\n\n#### 2.1 代码规范\n\n> &emsp;&emsp;本项目基本规范是依托于 vue 官方的 [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue)。并使用 Prettier 格式化代码，使样式与规则保持一致。\n>\n> .eslintrc.js 配置如下：\n\n\n```js\n{\nroot: true, // 当前配置为根配置，将不再从上级文件夹查找配置\nparserOptions: {\n  parser: 'babel-eslint',  // 采用 babel-eslint 作为语法解析器\n  sourceType: 'module',   // 指定来源的类型，有两种script或module\n  ecmaVersion: 6, //指定ECMAScript支持的版本，6为ES6\n},\nenv: {\n  browser: true,  // 设置为所需检查的代码是在浏览器环境运行的\n  es6: true  // 设置所需检查代码为 es6 语法书写\n},\nextends: ['plugin:vue/recommended', 'eslint:recommended'],// 扩展使用 vue 检查规则和eslint推荐规则\n  rules: {\n    'vue/attribute-hyphenation': 0, // 忽略属性连字\n    'vue/max-attributes-per-line':[2, { singleline: 10, multiline: { max: 1, allowFirstLine: false } }], // 每行最大属性\n    'vue/singleline-html-element-content-newline': 'off', // 单行html元素内容在新的一行\n    'vue/multiline-html-element-content-newline': 'off', // 多行html元素内容在新的一行\n    'vue/html-closing-bracket-newline': 'off', // html右括号在新的一行\n    'vue/no-v-html': 'off', // 不使用v-html\n    'vue/html-self-closing': 0, // 忽略html标签自闭合\n    'accessor-pairs': 2, // 应同时设置setter和getter\n    'arrow-spacing': [2, { before: true, after: true }], // 箭头间距\n    'vue/require-default-prop': 0, // 不检查默认属性\n    'vue/require-prop-types': 0, // 不检查默认类型\n    'block-spacing': [2, 'always'], // 块间距\n    'brace-style': [2, '1tbs', { allowSingleLine: true }], // 大括号样式允许单行\n    'camelcase': [2, { properties: 'always' }], //为属性强制执行驼峰命名\n    'comma-dangle': [2, 'never'], // 逗号不使用悬挂\n    'comma-spacing': [2, { before: false, after: true }], // 逗号间距\n    'comma-style': [2, 'last'], //（默认）与数组元素，对象属性或变量声明在同一行之后和同一行需要逗号\n    'constructor-super': 2,\n    'consistent-this': [2, 'that'], //强制this别名为that\n    'curly': [2, 'multi-line'], // 当一个块只包含一条语句时，不允许省略花括号。\n    'dot-location': [2, 'property'], //成员表达式中的点应与属性部分位于同一行\n    'eol-last': 2, // 强制文件以换行符结束（LF）\n    'eqeqeq': ['error', 'always', { null: 'ignore' }], // 强制使用全等\n    'generator-star-spacing': [2, { before: true, after: true }], // 生成器中'*'两侧都要有间距\n    'global-require': 1, // 所有调用require()都位于模块的顶层\n    'indent': [2, 2, { SwitchCase: 2 }], //缩进风格\n    'key-spacing': [2, { beforeColon: false, afterColon: true }], // 强制在对象字面量属性中的键和值之间保持一致的间距\n    'keyword-spacing': [2, { before: true, after: true }], // 关键字如if/function等的间距\n    'new-cap': [2, { newIsCap: true, capIsNew: false }],// 允许在没有new操作符的情况下调用大写启动的函数;（默认）要求new使用大写启动函数调用所有操作符\n    'new-parens': 2, // JavaScript通过new关键字调用函数时允许省略括号\n    'no-array-constructor': 1, // 不允许使用Array构造函数。除非要指定生成数组的长度\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off', // 只有开发环境可以使用console\n    'no-class-assign': 2, // 不允许修改类声明的变量\n    'no-const-assign': 2, // 不能修改使用const关键字声明的变量\n    'no-control-regex': 0, // 不允许正则表达式中的控制字符\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off', // 只有开发环境可以使用debugger\n    'no-delete-var': 2, // 不允许在变量上使用delete操作符\n    'no-dupe-args': 2, // 不允许在函数声明或表达式中使用重复的参数名称\n    'no-dupe-class-members': 2, // 不允许在类成员中使用重复的参数名称\n    'no-dupe-keys': 2, // 不允许在对象文字中使用重复键\n    'no-duplicate-case': 2, // 不允许在switch语句的case子句中使用重复的测试表达式\n    'no-empty-character-class': 2, // 不允许在正则表达式中使用空字符类\n    'no-empty-pattern': 2, // 不允许空块语句\n    'no-eval': 2, // 不允许使用eval\n    'no-ex-assign': 2, // 不允许在catch子句中重新分配例外\n    'no-extend-native': 2, // 不允许直接修改内建对象的原型\n    'no-extra-boolean-cast': 2, // 禁止不必要的布尔转换\n    'no-extra-parens': [2, 'functions'], // 仅在函数表达式附近禁止不必要的括号\n    'no-fallthrough': 2, //消除一个案件无意中掉到另一个案件\n    'no-floating-decimal': 2, //消除浮点小数点，并在数值有小数点但在其之前或之后缺少数字时发出警告\n    'no-func-assign': 2, // 允许重新分配function声明\n    'no-implied-eval': 2, // 消除隐含eval()\n    'no-inner-declarations': [2, 'functions'], // 不允许function嵌套块中的声明\n    'no-invalid-regexp': 2, //不允许RegExp构造函数中的无效正则表达式字符串\n    'no-irregular-whitespace': 2, //捕获无效的空格\n    'no-iterator': 2, //消除阴影变量声明\n    'no-label-var': 2, //禁止创建与范围内的变量共享名称的标签\n    'no-labels': [2, { allowLoop: false, allowSwitch: false }], // 消除 JavaScript 中使用带标签的语句\n    'no-lone-blocks': 2, //消除脚本顶层或其他块中不必要的和可能混淆的块\n    'no-mixed-spaces-and-tabs': 2, // 不允许使用混合空格和制表符进行缩进\n    'no-multi-spaces': 2, // 禁止在逻辑表达式，条件表达式，声明，数组元素，对象属性，序列和函数参数周围使用多个空格\n    'no-multi-str': 2, // 防止使用多行字符串\n    'no-multiple-empty-lines': [2, { max: 1 }], // 最多一个空行\n    'no-native-reassign': 2, // 不允许修改只读全局变量\n    'no-new-object': 2, // 不允许使用Object构造函数\n    'no-new-require': 2, // 消除new require表达的使用\n    'no-new-symbol': 2, // 防止Symbol与new 同时使用的意外错误\n    'no-new-wrappers': 2, // 杜绝使用String，Number以及Boolean与new操作\n    'no-obj-calls': 2, // 不允许调用Math，JSON和Reflect对象作为功能\n    'no-octal': 2, // 不允许使用八进制文字\n    'no-octal-escape': 2, // 不允许字符串文字中的八进制转义序列\n    'no-path-concat': 2, // 防止 Node.js 中的目录路径字符串连接无效\n    'no-redeclare': 2, // 消除在同一范围内具有多个声明的变量\n    'no-regex-spaces': 2, // 在正则表达式文字中不允许有多个空格\n    'no-return-assign': [2, 'except-parens'], // 消除return陈述中的任务，除非用括号括起来\n    'no-self-assign': 2, // 消除自我分配\n    'no-self-compare': 2, // 禁止比较变量与自身\n    'no-sequences': 2, // 禁止使用逗号运算符\n    'no-sparse-arrays': 2, // 不允许稀疏数组文字\n    'no-this-before-super': 2, // 在呼call前标记this/super关键字super()\n    'no-throw-literal': 2, // 不允许抛出不可能是Error对象的文字和其他表达式\n    'no-trailing-spaces': 2, // 不允许在行尾添加尾随空白\n    'no-undef': 2, // 任何对未声明的变量的引用都会导致错误\n    'no-undef-init': 2, // 消除初始化为undefined的变量声明\n    'no-underscore-dangle': 2, // 标识符不能以_开头或结尾\n    'no-unexpected-multiline': 2, // 不允许混淆多行表达式\n    'no-unmodified-loop-condition': 2, // 查找循环条件内的引用，然后检查这些引用的变量是否在循环中被修改\n    'no-unneeded-ternary': [2, { defaultAssignment: false }], // 不允许将条件表达式作为默认的分配模式\n    'no-unreachable': 2, // 不允许可达代码return，throw，continue，和break语句后面还有语句。\n    'no-unsafe-finally': 2, // 不允许return，throw，break，和continue里面的语句finally块\n    'no-unused-vars': [2, { vars: 'all', args: 'after-used' }],\n    // 消除未使用的变量，函数和函数的参数\n    // vars: 'all' 检查所有变量的使用情况，包括全局范围内的变量。这是默认设置。 args: 'after-used'  只有最后一个参数必须使用。例如，这允许您为函数使用两个命名参数，并且只要您使用第二个参数，ESLint 就不会警告您第一个参数。这是默认设置。\n    'no-useless-call': 2, // 标记使用情况，Function.prototype.call()并且Function.prototype.apply()可以用正常的函数调用来替代\n    'no-useless-computed-key': 2, // 禁止不必要地使用计算属性键\n    'no-useless-constructor': 2, // 在不改变类的工作方式的情况下安全地移除的类构造函数\n    'no-useless-escape': 0, // 禁用不必要的转义字符\n    'no-whitespace-before-property': 2, // 如果对象的属性位于同一行上，不允许围绕点或在开头括号之前留出空白\n    'no-with': 2, //禁用with\n    'no-var': 2, // 禁用var\n    'one-var': [2, { initialized: 'never' }], // 强制将变量声明为每个函数（对于var）或块（对于let和const）范围一起声明或单独声明。 initialized: 'never' 每个作用域要求多个变量声明用于初始化变量\n    'operator-linebreak': [2, 'after', { overrides: { '?': 'before', ':': 'before' } }], // 实施一致的换行\n    'padded-blocks': [2, 'never'], // 在块内强制执行一致的空行填充\n    'prefer-destructuring': ['error', { object: false, array: false }], // 此规则强制使用解构而不是通过成员表达式访问属性。\n    'quotes': [2, 'single', { avoidEscape: true, allowTemplateLiterals: true }],// avoidEscape: true 允许字符串使用单引号或双引号，只要字符串包含必须以其他方式转义的引号 ;allowTemplateLiterals: true 允许字符串使用反引号\n    'radix': 2, //parseInt必须指定第二个参数\n    'semi': [2, 'never'], // 不使用分号\n    'semi-spacing': [2, { before: false, after: true }], // 强制分号间隔\n    'space-before-blocks': [2, 'always'], // 块必须至少有一个先前的空间\n    'space-before-function-paren': [2, 'never'], // 在(参数后面不允许任何空格\n    'space-in-parens': [2, 'never'], // 禁止或要求（或）左边的一个或多个空格\n    'space-infix-ops': 2, // 强制二元运算符左右各有一个空格\n    'space-unary-ops': [2, { words: true, nonwords: false }],//  words: true  如：new，delete，typeof，void，yield 左右必须有空格 //  nonwords: false  一元运算符，如：-，+，--，++，!，!!左右不能有空格\n    'spaced-comment': [2, 'always', { markers: ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ','] }], // 注释开始后，此规则将强制间距的一致性//或/*\n    'template-curly-spacing': [2, 'never'], // 不允许大括号内的空格\n    'use-isnan': 2, //禁止比较时使用NaN，只能用isNaN()\n    'valid-typeof': 2, //必须使用合法的typeof的值\n    'wrap-iife': [2, 'any'], //立即执行函数表达式的小括号风格\n    'yield-star-spacing': [2, 'both'], // 强制执行*周围 yield*表达式的间距，两侧都必须有空格\n    'yoda': [2, 'never'],\n    'prefer-const': 2, // 使用let关键字声明的变量，但在初始分配后从未重新分配变量，应改为const声明\n    'object-curly-spacing': [2, 'always', { objectsInObjects: false }],// 不允许以对象元素开始和/或以对象元素结尾的对象的大括号内的间距\n    'array-bracket-spacing': [2, 'never'] // 不允许数组括号内的空格\n  }\n}\n\n```\n\n#### 2.2 eslint 安装与配置\n\n- 全局安装 eslint\n  ```js\n  npm install -g eslint\n  ```\n- 全局安装 Prettier\n  ```js\n  npm install -g prettier\n  ```\n- vscode 插件市场搜索 eslint 和 prettier,下载并安装。\n  ![图片1.png](/images/eslint.png)\n  ![图片2.png](/images/prettier.png)\n- vscode 编辑器 setting.json 中加如下配置：\n\n```js\n/* 开启保存时自动格式化 */\n\"editor.formatOnSave\": true,\n\n/* eslint的配置 */\n\"eslint.enable\": true,\n\"eslint.run\": \"onSave\",\n\"eslint.options\": {\n   \"extensions\": [\n     \".js\",\n     \".vue\"\n   ]\n },\n \"editor.codeActionsOnSave\": {\n   \"source.fixAll.eslint\": true // 保存时自动修复\n },\n // 关闭 vscode 默认的检查工具\n \"html.validate.scripts\": false,\n \"javascript.validate.enable\": false,\n \"eslint.alwaysShowStatus\": true,\n \"eslint.format.enable\": true,\n \"scss.lint.duplicateProperties\": \"error\",\n \"css.lint.duplicateProperties\": \"error\",\n \"less.lint.zeroUnits\": \"error\",\n \"eslint.validate\": [\n   \"javascript\",\n   \"javascriptreact\",\n   \"vue-html\",\n   \"vue\",\n   \"html\"\n ],\n\n/*  prettier的配置 */\n \"prettier.printWidth\": 120, // 超过最大值换行\n \"prettier.tabWidth\": 2, // 缩进字节数\n \"prettier.useTabs\": true, // 缩进使用tab\n \"prettier.semi\": false, // 句尾添加分号\n \"prettier.singleQuote\": true, // 使用单引号代替双引号\n \"prettier.proseWrap\": \"preserve\", // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行\n \"prettier.arrowParens\": \"avoid\", //  (x) => {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号\n \"prettier.bracketSpacing\": true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n \"prettier.endOfLine\": \"auto\", // 结尾是 \\n \\r \\n\\r auto\n \"prettier.htmlWhitespaceSensitivity\": \"ignore\",\n \"prettier.ignorePath\": \".prettierignore\", // 不使用prettier格式化的文件填写在项目的.prettierignore文件中\n \"prettier.requireConfig\": false, // Require a \"prettierconfig\" to format prettier\n \"prettier.trailingComma\": \"none\", // 在对象或数组最后一个元素后面是否加逗号\n\n/* 每种语言默认的格式化规则 */\n \"[html]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[css]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[scss]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[javascript]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[vue]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[json]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n\n```\n\n- 使用 vuecli 创建项目时，不选择 lint 选项。\n  ![vuecli](/images/vuecli.png)\n- 在项目开发依赖中，加入@vue/cli-plugin-eslint、babel-eslint、eslint、eslint-plugin-vue、prettier、prettier-eslint 依赖\n  ```js\n  npm install @vue/cli-plugin-eslint  babel-eslint eslint eslint-plugin-vue prettier prettier-eslint  –-save-dev\n  ```\n- 在项目 package.json 内加入 lint 命令。![图片4.png](/images/lint.png)\n- 开发时，保存文件，即可按 prettier 规则格式化文件，并自动修复可修复的 issue，不能自动修复的，请根据提示，手动修复。\n- 提示：vscode 已设置保存时格式化，但有时并不会格式化文件。已保存的文件还存在报错的，请手动格式化，并修改相应问题后，再次保存。\n- 提交代码前，运行 npm run lint 代码风格检查，确认无误后再进行提交。\n","source":"_posts/vue项目中使用eslint-prettier规范与检查代码.md","raw":"---\ntitle: vue项目中使用eslint+prettier规范与检查代码\ndate: 2020-01-16 17:54:10\ntags:\n---\n\n### 1.前言\n\n> &emsp;&emsp;在团队协作中，为避免低级 Bug、以及团队协作时不同代码风格对彼此造成的困扰与影响，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。EsLint 则是其中一个很好的工具。\n>\n> EsLint 提供以下支持：\n>\n> - ES6\n> - AngularJS\n> - JSX\n> - Style 检查\n> - 自定义错误和提示\n>\n> EsLint 提供以下几种校验：\n>\n> - 语法错误校验\n> - 不重要或丢失的标点符号，如分号\n> - 未被使用的参数提醒\n> - 漏掉的结束符，如}\n> - 确保样式的统一规则，如 sass 或者 less\n> - 检查变量的命名\n> - 影响性能的代码提醒，如 v-if 和 v-for 同时使用\n\n### 2.eslint 配置\n\n#### 2.1 代码规范\n\n> &emsp;&emsp;本项目基本规范是依托于 vue 官方的 [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue)。并使用 Prettier 格式化代码，使样式与规则保持一致。\n>\n> .eslintrc.js 配置如下：\n\n\n```js\n{\nroot: true, // 当前配置为根配置，将不再从上级文件夹查找配置\nparserOptions: {\n  parser: 'babel-eslint',  // 采用 babel-eslint 作为语法解析器\n  sourceType: 'module',   // 指定来源的类型，有两种script或module\n  ecmaVersion: 6, //指定ECMAScript支持的版本，6为ES6\n},\nenv: {\n  browser: true,  // 设置为所需检查的代码是在浏览器环境运行的\n  es6: true  // 设置所需检查代码为 es6 语法书写\n},\nextends: ['plugin:vue/recommended', 'eslint:recommended'],// 扩展使用 vue 检查规则和eslint推荐规则\n  rules: {\n    'vue/attribute-hyphenation': 0, // 忽略属性连字\n    'vue/max-attributes-per-line':[2, { singleline: 10, multiline: { max: 1, allowFirstLine: false } }], // 每行最大属性\n    'vue/singleline-html-element-content-newline': 'off', // 单行html元素内容在新的一行\n    'vue/multiline-html-element-content-newline': 'off', // 多行html元素内容在新的一行\n    'vue/html-closing-bracket-newline': 'off', // html右括号在新的一行\n    'vue/no-v-html': 'off', // 不使用v-html\n    'vue/html-self-closing': 0, // 忽略html标签自闭合\n    'accessor-pairs': 2, // 应同时设置setter和getter\n    'arrow-spacing': [2, { before: true, after: true }], // 箭头间距\n    'vue/require-default-prop': 0, // 不检查默认属性\n    'vue/require-prop-types': 0, // 不检查默认类型\n    'block-spacing': [2, 'always'], // 块间距\n    'brace-style': [2, '1tbs', { allowSingleLine: true }], // 大括号样式允许单行\n    'camelcase': [2, { properties: 'always' }], //为属性强制执行驼峰命名\n    'comma-dangle': [2, 'never'], // 逗号不使用悬挂\n    'comma-spacing': [2, { before: false, after: true }], // 逗号间距\n    'comma-style': [2, 'last'], //（默认）与数组元素，对象属性或变量声明在同一行之后和同一行需要逗号\n    'constructor-super': 2,\n    'consistent-this': [2, 'that'], //强制this别名为that\n    'curly': [2, 'multi-line'], // 当一个块只包含一条语句时，不允许省略花括号。\n    'dot-location': [2, 'property'], //成员表达式中的点应与属性部分位于同一行\n    'eol-last': 2, // 强制文件以换行符结束（LF）\n    'eqeqeq': ['error', 'always', { null: 'ignore' }], // 强制使用全等\n    'generator-star-spacing': [2, { before: true, after: true }], // 生成器中'*'两侧都要有间距\n    'global-require': 1, // 所有调用require()都位于模块的顶层\n    'indent': [2, 2, { SwitchCase: 2 }], //缩进风格\n    'key-spacing': [2, { beforeColon: false, afterColon: true }], // 强制在对象字面量属性中的键和值之间保持一致的间距\n    'keyword-spacing': [2, { before: true, after: true }], // 关键字如if/function等的间距\n    'new-cap': [2, { newIsCap: true, capIsNew: false }],// 允许在没有new操作符的情况下调用大写启动的函数;（默认）要求new使用大写启动函数调用所有操作符\n    'new-parens': 2, // JavaScript通过new关键字调用函数时允许省略括号\n    'no-array-constructor': 1, // 不允许使用Array构造函数。除非要指定生成数组的长度\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off', // 只有开发环境可以使用console\n    'no-class-assign': 2, // 不允许修改类声明的变量\n    'no-const-assign': 2, // 不能修改使用const关键字声明的变量\n    'no-control-regex': 0, // 不允许正则表达式中的控制字符\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off', // 只有开发环境可以使用debugger\n    'no-delete-var': 2, // 不允许在变量上使用delete操作符\n    'no-dupe-args': 2, // 不允许在函数声明或表达式中使用重复的参数名称\n    'no-dupe-class-members': 2, // 不允许在类成员中使用重复的参数名称\n    'no-dupe-keys': 2, // 不允许在对象文字中使用重复键\n    'no-duplicate-case': 2, // 不允许在switch语句的case子句中使用重复的测试表达式\n    'no-empty-character-class': 2, // 不允许在正则表达式中使用空字符类\n    'no-empty-pattern': 2, // 不允许空块语句\n    'no-eval': 2, // 不允许使用eval\n    'no-ex-assign': 2, // 不允许在catch子句中重新分配例外\n    'no-extend-native': 2, // 不允许直接修改内建对象的原型\n    'no-extra-boolean-cast': 2, // 禁止不必要的布尔转换\n    'no-extra-parens': [2, 'functions'], // 仅在函数表达式附近禁止不必要的括号\n    'no-fallthrough': 2, //消除一个案件无意中掉到另一个案件\n    'no-floating-decimal': 2, //消除浮点小数点，并在数值有小数点但在其之前或之后缺少数字时发出警告\n    'no-func-assign': 2, // 允许重新分配function声明\n    'no-implied-eval': 2, // 消除隐含eval()\n    'no-inner-declarations': [2, 'functions'], // 不允许function嵌套块中的声明\n    'no-invalid-regexp': 2, //不允许RegExp构造函数中的无效正则表达式字符串\n    'no-irregular-whitespace': 2, //捕获无效的空格\n    'no-iterator': 2, //消除阴影变量声明\n    'no-label-var': 2, //禁止创建与范围内的变量共享名称的标签\n    'no-labels': [2, { allowLoop: false, allowSwitch: false }], // 消除 JavaScript 中使用带标签的语句\n    'no-lone-blocks': 2, //消除脚本顶层或其他块中不必要的和可能混淆的块\n    'no-mixed-spaces-and-tabs': 2, // 不允许使用混合空格和制表符进行缩进\n    'no-multi-spaces': 2, // 禁止在逻辑表达式，条件表达式，声明，数组元素，对象属性，序列和函数参数周围使用多个空格\n    'no-multi-str': 2, // 防止使用多行字符串\n    'no-multiple-empty-lines': [2, { max: 1 }], // 最多一个空行\n    'no-native-reassign': 2, // 不允许修改只读全局变量\n    'no-new-object': 2, // 不允许使用Object构造函数\n    'no-new-require': 2, // 消除new require表达的使用\n    'no-new-symbol': 2, // 防止Symbol与new 同时使用的意外错误\n    'no-new-wrappers': 2, // 杜绝使用String，Number以及Boolean与new操作\n    'no-obj-calls': 2, // 不允许调用Math，JSON和Reflect对象作为功能\n    'no-octal': 2, // 不允许使用八进制文字\n    'no-octal-escape': 2, // 不允许字符串文字中的八进制转义序列\n    'no-path-concat': 2, // 防止 Node.js 中的目录路径字符串连接无效\n    'no-redeclare': 2, // 消除在同一范围内具有多个声明的变量\n    'no-regex-spaces': 2, // 在正则表达式文字中不允许有多个空格\n    'no-return-assign': [2, 'except-parens'], // 消除return陈述中的任务，除非用括号括起来\n    'no-self-assign': 2, // 消除自我分配\n    'no-self-compare': 2, // 禁止比较变量与自身\n    'no-sequences': 2, // 禁止使用逗号运算符\n    'no-sparse-arrays': 2, // 不允许稀疏数组文字\n    'no-this-before-super': 2, // 在呼call前标记this/super关键字super()\n    'no-throw-literal': 2, // 不允许抛出不可能是Error对象的文字和其他表达式\n    'no-trailing-spaces': 2, // 不允许在行尾添加尾随空白\n    'no-undef': 2, // 任何对未声明的变量的引用都会导致错误\n    'no-undef-init': 2, // 消除初始化为undefined的变量声明\n    'no-underscore-dangle': 2, // 标识符不能以_开头或结尾\n    'no-unexpected-multiline': 2, // 不允许混淆多行表达式\n    'no-unmodified-loop-condition': 2, // 查找循环条件内的引用，然后检查这些引用的变量是否在循环中被修改\n    'no-unneeded-ternary': [2, { defaultAssignment: false }], // 不允许将条件表达式作为默认的分配模式\n    'no-unreachable': 2, // 不允许可达代码return，throw，continue，和break语句后面还有语句。\n    'no-unsafe-finally': 2, // 不允许return，throw，break，和continue里面的语句finally块\n    'no-unused-vars': [2, { vars: 'all', args: 'after-used' }],\n    // 消除未使用的变量，函数和函数的参数\n    // vars: 'all' 检查所有变量的使用情况，包括全局范围内的变量。这是默认设置。 args: 'after-used'  只有最后一个参数必须使用。例如，这允许您为函数使用两个命名参数，并且只要您使用第二个参数，ESLint 就不会警告您第一个参数。这是默认设置。\n    'no-useless-call': 2, // 标记使用情况，Function.prototype.call()并且Function.prototype.apply()可以用正常的函数调用来替代\n    'no-useless-computed-key': 2, // 禁止不必要地使用计算属性键\n    'no-useless-constructor': 2, // 在不改变类的工作方式的情况下安全地移除的类构造函数\n    'no-useless-escape': 0, // 禁用不必要的转义字符\n    'no-whitespace-before-property': 2, // 如果对象的属性位于同一行上，不允许围绕点或在开头括号之前留出空白\n    'no-with': 2, //禁用with\n    'no-var': 2, // 禁用var\n    'one-var': [2, { initialized: 'never' }], // 强制将变量声明为每个函数（对于var）或块（对于let和const）范围一起声明或单独声明。 initialized: 'never' 每个作用域要求多个变量声明用于初始化变量\n    'operator-linebreak': [2, 'after', { overrides: { '?': 'before', ':': 'before' } }], // 实施一致的换行\n    'padded-blocks': [2, 'never'], // 在块内强制执行一致的空行填充\n    'prefer-destructuring': ['error', { object: false, array: false }], // 此规则强制使用解构而不是通过成员表达式访问属性。\n    'quotes': [2, 'single', { avoidEscape: true, allowTemplateLiterals: true }],// avoidEscape: true 允许字符串使用单引号或双引号，只要字符串包含必须以其他方式转义的引号 ;allowTemplateLiterals: true 允许字符串使用反引号\n    'radix': 2, //parseInt必须指定第二个参数\n    'semi': [2, 'never'], // 不使用分号\n    'semi-spacing': [2, { before: false, after: true }], // 强制分号间隔\n    'space-before-blocks': [2, 'always'], // 块必须至少有一个先前的空间\n    'space-before-function-paren': [2, 'never'], // 在(参数后面不允许任何空格\n    'space-in-parens': [2, 'never'], // 禁止或要求（或）左边的一个或多个空格\n    'space-infix-ops': 2, // 强制二元运算符左右各有一个空格\n    'space-unary-ops': [2, { words: true, nonwords: false }],//  words: true  如：new，delete，typeof，void，yield 左右必须有空格 //  nonwords: false  一元运算符，如：-，+，--，++，!，!!左右不能有空格\n    'spaced-comment': [2, 'always', { markers: ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ','] }], // 注释开始后，此规则将强制间距的一致性//或/*\n    'template-curly-spacing': [2, 'never'], // 不允许大括号内的空格\n    'use-isnan': 2, //禁止比较时使用NaN，只能用isNaN()\n    'valid-typeof': 2, //必须使用合法的typeof的值\n    'wrap-iife': [2, 'any'], //立即执行函数表达式的小括号风格\n    'yield-star-spacing': [2, 'both'], // 强制执行*周围 yield*表达式的间距，两侧都必须有空格\n    'yoda': [2, 'never'],\n    'prefer-const': 2, // 使用let关键字声明的变量，但在初始分配后从未重新分配变量，应改为const声明\n    'object-curly-spacing': [2, 'always', { objectsInObjects: false }],// 不允许以对象元素开始和/或以对象元素结尾的对象的大括号内的间距\n    'array-bracket-spacing': [2, 'never'] // 不允许数组括号内的空格\n  }\n}\n\n```\n\n#### 2.2 eslint 安装与配置\n\n- 全局安装 eslint\n  ```js\n  npm install -g eslint\n  ```\n- 全局安装 Prettier\n  ```js\n  npm install -g prettier\n  ```\n- vscode 插件市场搜索 eslint 和 prettier,下载并安装。\n  ![图片1.png](/images/eslint.png)\n  ![图片2.png](/images/prettier.png)\n- vscode 编辑器 setting.json 中加如下配置：\n\n```js\n/* 开启保存时自动格式化 */\n\"editor.formatOnSave\": true,\n\n/* eslint的配置 */\n\"eslint.enable\": true,\n\"eslint.run\": \"onSave\",\n\"eslint.options\": {\n   \"extensions\": [\n     \".js\",\n     \".vue\"\n   ]\n },\n \"editor.codeActionsOnSave\": {\n   \"source.fixAll.eslint\": true // 保存时自动修复\n },\n // 关闭 vscode 默认的检查工具\n \"html.validate.scripts\": false,\n \"javascript.validate.enable\": false,\n \"eslint.alwaysShowStatus\": true,\n \"eslint.format.enable\": true,\n \"scss.lint.duplicateProperties\": \"error\",\n \"css.lint.duplicateProperties\": \"error\",\n \"less.lint.zeroUnits\": \"error\",\n \"eslint.validate\": [\n   \"javascript\",\n   \"javascriptreact\",\n   \"vue-html\",\n   \"vue\",\n   \"html\"\n ],\n\n/*  prettier的配置 */\n \"prettier.printWidth\": 120, // 超过最大值换行\n \"prettier.tabWidth\": 2, // 缩进字节数\n \"prettier.useTabs\": true, // 缩进使用tab\n \"prettier.semi\": false, // 句尾添加分号\n \"prettier.singleQuote\": true, // 使用单引号代替双引号\n \"prettier.proseWrap\": \"preserve\", // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行\n \"prettier.arrowParens\": \"avoid\", //  (x) => {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号\n \"prettier.bracketSpacing\": true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n \"prettier.endOfLine\": \"auto\", // 结尾是 \\n \\r \\n\\r auto\n \"prettier.htmlWhitespaceSensitivity\": \"ignore\",\n \"prettier.ignorePath\": \".prettierignore\", // 不使用prettier格式化的文件填写在项目的.prettierignore文件中\n \"prettier.requireConfig\": false, // Require a \"prettierconfig\" to format prettier\n \"prettier.trailingComma\": \"none\", // 在对象或数组最后一个元素后面是否加逗号\n\n/* 每种语言默认的格式化规则 */\n \"[html]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[css]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[scss]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[javascript]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[vue]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n \"[json]\": {\n   \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n },\n\n```\n\n- 使用 vuecli 创建项目时，不选择 lint 选项。\n  ![vuecli](/images/vuecli.png)\n- 在项目开发依赖中，加入@vue/cli-plugin-eslint、babel-eslint、eslint、eslint-plugin-vue、prettier、prettier-eslint 依赖\n  ```js\n  npm install @vue/cli-plugin-eslint  babel-eslint eslint eslint-plugin-vue prettier prettier-eslint  –-save-dev\n  ```\n- 在项目 package.json 内加入 lint 命令。![图片4.png](/images/lint.png)\n- 开发时，保存文件，即可按 prettier 规则格式化文件，并自动修复可修复的 issue，不能自动修复的，请根据提示，手动修复。\n- 提示：vscode 已设置保存时格式化，但有时并不会格式化文件。已保存的文件还存在报错的，请手动格式化，并修改相应问题后，再次保存。\n- 提交代码前，运行 npm run lint 代码风格检查，确认无误后再进行提交。\n","slug":"vue项目中使用eslint-prettier规范与检查代码","published":1,"updated":"2020-01-21T07:33:03.701Z","_id":"ck5njk9ua0001l4w27x8fd99m","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><blockquote>\n<p>&emsp;&emsp;在团队协作中，为避免低级 Bug、以及团队协作时不同代码风格对彼此造成的困扰与影响，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。EsLint 则是其中一个很好的工具。</p>\n<p>EsLint 提供以下支持：</p>\n<ul>\n<li>ES6</li>\n<li>AngularJS</li>\n<li>JSX</li>\n<li>Style 检查</li>\n<li>自定义错误和提示</li>\n</ul>\n<p>EsLint 提供以下几种校验：</p>\n<ul>\n<li>语法错误校验</li>\n<li>不重要或丢失的标点符号，如分号</li>\n<li>未被使用的参数提醒</li>\n<li>漏掉的结束符，如}</li>\n<li>确保样式的统一规则，如 sass 或者 less</li>\n<li>检查变量的命名</li>\n<li>影响性能的代码提醒，如 v-if 和 v-for 同时使用</li>\n</ul>\n</blockquote>\n<h3 id=\"2-eslint-配置\"><a href=\"#2-eslint-配置\" class=\"headerlink\" title=\"2.eslint 配置\"></a>2.eslint 配置</h3><h4 id=\"2-1-代码规范\"><a href=\"#2-1-代码规范\" class=\"headerlink\" title=\"2.1 代码规范\"></a>2.1 代码规范</h4><blockquote>\n<p>&emsp;&emsp;本项目基本规范是依托于 vue 官方的 <a href=\"https://github.com/vuejs/eslint-plugin-vue\" target=\"_blank\" rel=\"noopener\">eslint-plugin-vue</a>。并使用 Prettier 格式化代码，使样式与规则保持一致。</p>\n<p>.eslintrc.js 配置如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br><span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 当前配置为根配置，将不再从上级文件夹查找配置</span><br><span class=\"hljs-attr\">parserOptions</span>: &#123;<br>  <span class=\"hljs-attr\">parser</span>: <span class=\"hljs-string\">'babel-eslint'</span>,  <span class=\"hljs-comment\">// 采用 babel-eslint 作为语法解析器</span><br>  <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>,   <span class=\"hljs-comment\">// 指定来源的类型，有两种script或module</span><br>  <span class=\"hljs-attr\">ecmaVersion</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">//指定ECMAScript支持的版本，6为ES6</span><br>&#125;,<br><span class=\"hljs-attr\">env</span>: &#123;<br>  <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// 设置为所需检查的代码是在浏览器环境运行的</span><br>  <span class=\"hljs-attr\">es6</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// 设置所需检查代码为 es6 语法书写</span><br>&#125;,<br><span class=\"hljs-attr\">extends</span>: [<span class=\"hljs-string\">'plugin:vue/recommended'</span>, <span class=\"hljs-string\">'eslint:recommended'</span>],<span class=\"hljs-comment\">// 扩展使用 vue 检查规则和eslint推荐规则</span><br>  <span class=\"hljs-attr\">rules</span>: &#123;<br>    <span class=\"hljs-string\">'vue/attribute-hyphenation'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 忽略属性连字</span><br>    <span class=\"hljs-string\">'vue/max-attributes-per-line'</span>:[<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">singleline</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">multiline</span>: &#123; <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">allowFirstLine</span>: <span class=\"hljs-literal\">false</span> &#125; &#125;], <span class=\"hljs-comment\">// 每行最大属性</span><br>    <span class=\"hljs-string\">'vue/singleline-html-element-content-newline'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 单行html元素内容在新的一行</span><br>    <span class=\"hljs-string\">'vue/multiline-html-element-content-newline'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 多行html元素内容在新的一行</span><br>    <span class=\"hljs-string\">'vue/html-closing-bracket-newline'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// html右括号在新的一行</span><br>    <span class=\"hljs-string\">'vue/no-v-html'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 不使用v-html</span><br>    <span class=\"hljs-string\">'vue/html-self-closing'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 忽略html标签自闭合</span><br>    <span class=\"hljs-string\">'accessor-pairs'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 应同时设置setter和getter</span><br>    <span class=\"hljs-string\">'arrow-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 箭头间距</span><br>    <span class=\"hljs-string\">'vue/require-default-prop'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 不检查默认属性</span><br>    <span class=\"hljs-string\">'vue/require-prop-types'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 不检查默认类型</span><br>    <span class=\"hljs-string\">'block-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>], <span class=\"hljs-comment\">// 块间距</span><br>    <span class=\"hljs-string\">'brace-style'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'1tbs'</span>, &#123; <span class=\"hljs-attr\">allowSingleLine</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 大括号样式允许单行</span><br>    <span class=\"hljs-string\">'camelcase'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">properties</span>: <span class=\"hljs-string\">'always'</span> &#125;], <span class=\"hljs-comment\">//为属性强制执行驼峰命名</span><br>    <span class=\"hljs-string\">'comma-dangle'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 逗号不使用悬挂</span><br>    <span class=\"hljs-string\">'comma-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 逗号间距</span><br>    <span class=\"hljs-string\">'comma-style'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'last'</span>], <span class=\"hljs-comment\">//（默认）与数组元素，对象属性或变量声明在同一行之后和同一行需要逗号</span><br>    <span class=\"hljs-string\">'constructor-super'</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-string\">'consistent-this'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'that'</span>], <span class=\"hljs-comment\">//强制this别名为that</span><br>    <span class=\"hljs-string\">'curly'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'multi-line'</span>], <span class=\"hljs-comment\">// 当一个块只包含一条语句时，不允许省略花括号。</span><br>    <span class=\"hljs-string\">'dot-location'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'property'</span>], <span class=\"hljs-comment\">//成员表达式中的点应与属性部分位于同一行</span><br>    <span class=\"hljs-string\">'eol-last'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 强制文件以换行符结束（LF）</span><br>    <span class=\"hljs-string\">'eqeqeq'</span>: [<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-string\">'always'</span>, &#123; <span class=\"hljs-attr\">null</span>: <span class=\"hljs-string\">'ignore'</span> &#125;], <span class=\"hljs-comment\">// 强制使用全等</span><br>    <span class=\"hljs-string\">'generator-star-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 生成器中'*'两侧都要有间距</span><br>    <span class=\"hljs-string\">'global-require'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 所有调用require()都位于模块的顶层</span><br>    <span class=\"hljs-string\">'indent'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">SwitchCase</span>: <span class=\"hljs-number\">2</span> &#125;], <span class=\"hljs-comment\">//缩进风格</span><br>    <span class=\"hljs-string\">'key-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">beforeColon</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">afterColon</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 强制在对象字面量属性中的键和值之间保持一致的间距</span><br>    <span class=\"hljs-string\">'keyword-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 关键字如if/function等的间距</span><br>    <span class=\"hljs-string\">'new-cap'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">newIsCap</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">capIsNew</span>: <span class=\"hljs-literal\">false</span> &#125;],<span class=\"hljs-comment\">// 允许在没有new操作符的情况下调用大写启动的函数;（默认）要求new使用大写启动函数调用所有操作符</span><br>    <span class=\"hljs-string\">'new-parens'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// JavaScript通过new关键字调用函数时允许省略括号</span><br>    <span class=\"hljs-string\">'no-array-constructor'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 不允许使用Array构造函数。除非要指定生成数组的长度</span><br>    <span class=\"hljs-string\">'no-console'</span>: process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span> ? <span class=\"hljs-string\">'error'</span> : <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 只有开发环境可以使用console</span><br>    <span class=\"hljs-string\">'no-class-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许修改类声明的变量</span><br>    <span class=\"hljs-string\">'no-const-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不能修改使用const关键字声明的变量</span><br>    <span class=\"hljs-string\">'no-control-regex'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 不允许正则表达式中的控制字符</span><br>    <span class=\"hljs-string\">'no-debugger'</span>: process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span> ? <span class=\"hljs-string\">'error'</span> : <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 只有开发环境可以使用debugger</span><br>    <span class=\"hljs-string\">'no-delete-var'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在变量上使用delete操作符</span><br>    <span class=\"hljs-string\">'no-dupe-args'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在函数声明或表达式中使用重复的参数名称</span><br>    <span class=\"hljs-string\">'no-dupe-class-members'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在类成员中使用重复的参数名称</span><br>    <span class=\"hljs-string\">'no-dupe-keys'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在对象文字中使用重复键</span><br>    <span class=\"hljs-string\">'no-duplicate-case'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在switch语句的case子句中使用重复的测试表达式</span><br>    <span class=\"hljs-string\">'no-empty-character-class'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在正则表达式中使用空字符类</span><br>    <span class=\"hljs-string\">'no-empty-pattern'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许空块语句</span><br>    <span class=\"hljs-string\">'no-eval'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用eval</span><br>    <span class=\"hljs-string\">'no-ex-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在catch子句中重新分配例外</span><br>    <span class=\"hljs-string\">'no-extend-native'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许直接修改内建对象的原型</span><br>    <span class=\"hljs-string\">'no-extra-boolean-cast'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止不必要的布尔转换</span><br>    <span class=\"hljs-string\">'no-extra-parens'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'functions'</span>], <span class=\"hljs-comment\">// 仅在函数表达式附近禁止不必要的括号</span><br>    <span class=\"hljs-string\">'no-fallthrough'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除一个案件无意中掉到另一个案件</span><br>    <span class=\"hljs-string\">'no-floating-decimal'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除浮点小数点，并在数值有小数点但在其之前或之后缺少数字时发出警告</span><br>    <span class=\"hljs-string\">'no-func-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 允许重新分配function声明</span><br>    <span class=\"hljs-string\">'no-implied-eval'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除隐含eval()</span><br>    <span class=\"hljs-string\">'no-inner-declarations'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'functions'</span>], <span class=\"hljs-comment\">// 不允许function嵌套块中的声明</span><br>    <span class=\"hljs-string\">'no-invalid-regexp'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//不允许RegExp构造函数中的无效正则表达式字符串</span><br>    <span class=\"hljs-string\">'no-irregular-whitespace'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//捕获无效的空格</span><br>    <span class=\"hljs-string\">'no-iterator'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除阴影变量声明</span><br>    <span class=\"hljs-string\">'no-label-var'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//禁止创建与范围内的变量共享名称的标签</span><br>    <span class=\"hljs-string\">'no-labels'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">allowLoop</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">allowSwitch</span>: <span class=\"hljs-literal\">false</span> &#125;], <span class=\"hljs-comment\">// 消除 JavaScript 中使用带标签的语句</span><br>    <span class=\"hljs-string\">'no-lone-blocks'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除脚本顶层或其他块中不必要的和可能混淆的块</span><br>    <span class=\"hljs-string\">'no-mixed-spaces-and-tabs'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用混合空格和制表符进行缩进</span><br>    <span class=\"hljs-string\">'no-multi-spaces'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止在逻辑表达式，条件表达式，声明，数组元素，对象属性，序列和函数参数周围使用多个空格</span><br>    <span class=\"hljs-string\">'no-multi-str'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 防止使用多行字符串</span><br>    <span class=\"hljs-string\">'no-multiple-empty-lines'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">1</span> &#125;], <span class=\"hljs-comment\">// 最多一个空行</span><br>    <span class=\"hljs-string\">'no-native-reassign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许修改只读全局变量</span><br>    <span class=\"hljs-string\">'no-new-object'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用Object构造函数</span><br>    <span class=\"hljs-string\">'no-new-require'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除new require表达的使用</span><br>    <span class=\"hljs-string\">'no-new-symbol'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 防止Symbol与new 同时使用的意外错误</span><br>    <span class=\"hljs-string\">'no-new-wrappers'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 杜绝使用String，Number以及Boolean与new操作</span><br>    <span class=\"hljs-string\">'no-obj-calls'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许调用Math，JSON和Reflect对象作为功能</span><br>    <span class=\"hljs-string\">'no-octal'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用八进制文字</span><br>    <span class=\"hljs-string\">'no-octal-escape'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许字符串文字中的八进制转义序列</span><br>    <span class=\"hljs-string\">'no-path-concat'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 防止 Node.js 中的目录路径字符串连接无效</span><br>    <span class=\"hljs-string\">'no-redeclare'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除在同一范围内具有多个声明的变量</span><br>    <span class=\"hljs-string\">'no-regex-spaces'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 在正则表达式文字中不允许有多个空格</span><br>    <span class=\"hljs-string\">'no-return-assign'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'except-parens'</span>], <span class=\"hljs-comment\">// 消除return陈述中的任务，除非用括号括起来</span><br>    <span class=\"hljs-string\">'no-self-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除自我分配</span><br>    <span class=\"hljs-string\">'no-self-compare'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止比较变量与自身</span><br>    <span class=\"hljs-string\">'no-sequences'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止使用逗号运算符</span><br>    <span class=\"hljs-string\">'no-sparse-arrays'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许稀疏数组文字</span><br>    <span class=\"hljs-string\">'no-this-before-super'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 在呼call前标记this/super关键字super()</span><br>    <span class=\"hljs-string\">'no-throw-literal'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许抛出不可能是Error对象的文字和其他表达式</span><br>    <span class=\"hljs-string\">'no-trailing-spaces'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在行尾添加尾随空白</span><br>    <span class=\"hljs-string\">'no-undef'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 任何对未声明的变量的引用都会导致错误</span><br>    <span class=\"hljs-string\">'no-undef-init'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除初始化为undefined的变量声明</span><br>    <span class=\"hljs-string\">'no-underscore-dangle'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 标识符不能以_开头或结尾</span><br>    <span class=\"hljs-string\">'no-unexpected-multiline'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许混淆多行表达式</span><br>    <span class=\"hljs-string\">'no-unmodified-loop-condition'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 查找循环条件内的引用，然后检查这些引用的变量是否在循环中被修改</span><br>    <span class=\"hljs-string\">'no-unneeded-ternary'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">defaultAssignment</span>: <span class=\"hljs-literal\">false</span> &#125;], <span class=\"hljs-comment\">// 不允许将条件表达式作为默认的分配模式</span><br>    <span class=\"hljs-string\">'no-unreachable'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许可达代码return，throw，continue，和break语句后面还有语句。</span><br>    <span class=\"hljs-string\">'no-unsafe-finally'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许return，throw，break，和continue里面的语句finally块</span><br>    <span class=\"hljs-string\">'no-unused-vars'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">vars</span>: <span class=\"hljs-string\">'all'</span>, <span class=\"hljs-attr\">args</span>: <span class=\"hljs-string\">'after-used'</span> &#125;],<br>    <span class=\"hljs-comment\">// 消除未使用的变量，函数和函数的参数</span><br>    <span class=\"hljs-comment\">// vars: 'all' 检查所有变量的使用情况，包括全局范围内的变量。这是默认设置。 args: 'after-used'  只有最后一个参数必须使用。例如，这允许您为函数使用两个命名参数，并且只要您使用第二个参数，ESLint 就不会警告您第一个参数。这是默认设置。</span><br>    <span class=\"hljs-string\">'no-useless-call'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 标记使用情况，Function.prototype.call()并且Function.prototype.apply()可以用正常的函数调用来替代</span><br>    <span class=\"hljs-string\">'no-useless-computed-key'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止不必要地使用计算属性键</span><br>    <span class=\"hljs-string\">'no-useless-constructor'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 在不改变类的工作方式的情况下安全地移除的类构造函数</span><br>    <span class=\"hljs-string\">'no-useless-escape'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 禁用不必要的转义字符</span><br>    <span class=\"hljs-string\">'no-whitespace-before-property'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 如果对象的属性位于同一行上，不允许围绕点或在开头括号之前留出空白</span><br>    <span class=\"hljs-string\">'no-with'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//禁用with</span><br>    <span class=\"hljs-string\">'no-var'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁用var</span><br>    <span class=\"hljs-string\">'one-var'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">initialized</span>: <span class=\"hljs-string\">'never'</span> &#125;], <span class=\"hljs-comment\">// 强制将变量声明为每个函数（对于var）或块（对于let和const）范围一起声明或单独声明。 initialized: 'never' 每个作用域要求多个变量声明用于初始化变量</span><br>    <span class=\"hljs-string\">'operator-linebreak'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'after'</span>, &#123; <span class=\"hljs-attr\">overrides</span>: &#123; <span class=\"hljs-string\">'?'</span>: <span class=\"hljs-string\">'before'</span>, <span class=\"hljs-string\">':'</span>: <span class=\"hljs-string\">'before'</span> &#125; &#125;], <span class=\"hljs-comment\">// 实施一致的换行</span><br>    <span class=\"hljs-string\">'padded-blocks'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 在块内强制执行一致的空行填充</span><br>    <span class=\"hljs-string\">'prefer-destructuring'</span>: [<span class=\"hljs-string\">'error'</span>, &#123; <span class=\"hljs-attr\">object</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">array</span>: <span class=\"hljs-literal\">false</span> &#125;], <span class=\"hljs-comment\">// 此规则强制使用解构而不是通过成员表达式访问属性。</span><br>    <span class=\"hljs-string\">'quotes'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'single'</span>, &#123; <span class=\"hljs-attr\">avoidEscape</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">allowTemplateLiterals</span>: <span class=\"hljs-literal\">true</span> &#125;],<span class=\"hljs-comment\">// avoidEscape: true 允许字符串使用单引号或双引号，只要字符串包含必须以其他方式转义的引号 ;allowTemplateLiterals: true 允许字符串使用反引号</span><br>    <span class=\"hljs-string\">'radix'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//parseInt必须指定第二个参数</span><br>    <span class=\"hljs-string\">'semi'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 不使用分号</span><br>    <span class=\"hljs-string\">'semi-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 强制分号间隔</span><br>    <span class=\"hljs-string\">'space-before-blocks'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>], <span class=\"hljs-comment\">// 块必须至少有一个先前的空间</span><br>    <span class=\"hljs-string\">'space-before-function-paren'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 在(参数后面不允许任何空格</span><br>    <span class=\"hljs-string\">'space-in-parens'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 禁止或要求（或）左边的一个或多个空格</span><br>    <span class=\"hljs-string\">'space-infix-ops'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 强制二元运算符左右各有一个空格</span><br>    <span class=\"hljs-string\">'space-unary-ops'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">words</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">nonwords</span>: <span class=\"hljs-literal\">false</span> &#125;],<span class=\"hljs-comment\">//  words: true  如：new，delete，typeof，void，yield 左右必须有空格 //  nonwords: false  一元运算符，如：-，+，--，++，!，!!左右不能有空格</span><br>    <span class=\"hljs-string\">'spaced-comment'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>, &#123; <span class=\"hljs-attr\">markers</span>: [<span class=\"hljs-string\">'global'</span>, <span class=\"hljs-string\">'globals'</span>, <span class=\"hljs-string\">'eslint'</span>, <span class=\"hljs-string\">'eslint-disable'</span>, <span class=\"hljs-string\">'*package'</span>, <span class=\"hljs-string\">'!'</span>, <span class=\"hljs-string\">','</span>] &#125;], <span class=\"hljs-comment\">// 注释开始后，此规则将强制间距的一致性//或/*</span><br>    <span class=\"hljs-string\">'template-curly-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 不允许大括号内的空格</span><br>    <span class=\"hljs-string\">'use-isnan'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//禁止比较时使用NaN，只能用isNaN()</span><br>    <span class=\"hljs-string\">'valid-typeof'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//必须使用合法的typeof的值</span><br>    <span class=\"hljs-string\">'wrap-iife'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'any'</span>], <span class=\"hljs-comment\">//立即执行函数表达式的小括号风格</span><br>    <span class=\"hljs-string\">'yield-star-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'both'</span>], <span class=\"hljs-comment\">// 强制执行*周围 yield*表达式的间距，两侧都必须有空格</span><br>    <span class=\"hljs-string\">'yoda'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>],<br>    <span class=\"hljs-string\">'prefer-const'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 使用let关键字声明的变量，但在初始分配后从未重新分配变量，应改为const声明</span><br>    <span class=\"hljs-string\">'object-curly-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>, &#123; <span class=\"hljs-attr\">objectsInObjects</span>: <span class=\"hljs-literal\">false</span> &#125;],<span class=\"hljs-comment\">// 不允许以对象元素开始和/或以对象元素结尾的对象的大括号内的间距</span><br>    <span class=\"hljs-string\">'array-bracket-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>] <span class=\"hljs-comment\">// 不允许数组括号内的空格</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-eslint-安装与配置\"><a href=\"#2-2-eslint-安装与配置\" class=\"headerlink\" title=\"2.2 eslint 安装与配置\"></a>2.2 eslint 安装与配置</h4><ul>\n<li>全局安装 eslint<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">npm install -g eslint<br></code></pre></td></tr></table></figure></li>\n<li>全局安装 Prettier<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">npm install -g prettier<br></code></pre></td></tr></table></figure></li>\n<li>vscode 插件市场搜索 eslint 和 prettier,下载并安装。<br><img src=\"/images/eslint.png\" alt=\"图片1.png\"><br><img src=\"/images/prettier.png\" alt=\"图片2.png\"></li>\n<li>vscode 编辑器 setting.json 中加如下配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/* 开启保存时自动格式化 */</span><br><span class=\"hljs-string\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>,<br><br><span class=\"hljs-comment\">/* eslint的配置 */</span><br><span class=\"hljs-string\">\"eslint.enable\"</span>: <span class=\"hljs-literal\">true</span>,<br><span class=\"hljs-string\">\"eslint.run\"</span>: <span class=\"hljs-string\">\"onSave\"</span>,<br><span class=\"hljs-string\">\"eslint.options\"</span>: &#123;<br>   <span class=\"hljs-string\">\"extensions\"</span>: [<br>     <span class=\"hljs-string\">\".js\"</span>,<br>     <span class=\"hljs-string\">\".vue\"</span><br>   ]<br> &#125;,<br> <span class=\"hljs-string\">\"editor.codeActionsOnSave\"</span>: &#123;<br>   <span class=\"hljs-string\">\"source.fixAll.eslint\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 保存时自动修复</span><br> &#125;,<br> <span class=\"hljs-comment\">// 关闭 vscode 默认的检查工具</span><br> <span class=\"hljs-string\">\"html.validate.scripts\"</span>: <span class=\"hljs-literal\">false</span>,<br> <span class=\"hljs-string\">\"javascript.validate.enable\"</span>: <span class=\"hljs-literal\">false</span>,<br> <span class=\"hljs-string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"hljs-literal\">true</span>,<br> <span class=\"hljs-string\">\"eslint.format.enable\"</span>: <span class=\"hljs-literal\">true</span>,<br> <span class=\"hljs-string\">\"scss.lint.duplicateProperties\"</span>: <span class=\"hljs-string\">\"error\"</span>,<br> <span class=\"hljs-string\">\"css.lint.duplicateProperties\"</span>: <span class=\"hljs-string\">\"error\"</span>,<br> <span class=\"hljs-string\">\"less.lint.zeroUnits\"</span>: <span class=\"hljs-string\">\"error\"</span>,<br> <span class=\"hljs-string\">\"eslint.validate\"</span>: [<br>   <span class=\"hljs-string\">\"javascript\"</span>,<br>   <span class=\"hljs-string\">\"javascriptreact\"</span>,<br>   <span class=\"hljs-string\">\"vue-html\"</span>,<br>   <span class=\"hljs-string\">\"vue\"</span>,<br>   <span class=\"hljs-string\">\"html\"</span><br> ],<br><br><span class=\"hljs-comment\">/*  prettier的配置 */</span><br> <span class=\"hljs-string\">\"prettier.printWidth\"</span>: <span class=\"hljs-number\">120</span>, <span class=\"hljs-comment\">// 超过最大值换行</span><br> <span class=\"hljs-string\">\"prettier.tabWidth\"</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 缩进字节数</span><br> <span class=\"hljs-string\">\"prettier.useTabs\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 缩进使用tab</span><br> <span class=\"hljs-string\">\"prettier.semi\"</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 句尾添加分号</span><br> <span class=\"hljs-string\">\"prettier.singleQuote\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 使用单引号代替双引号</span><br> <span class=\"hljs-string\">\"prettier.proseWrap\"</span>: <span class=\"hljs-string\">\"preserve\"</span>, <span class=\"hljs-comment\">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span><br> <span class=\"hljs-string\">\"prettier.arrowParens\"</span>: <span class=\"hljs-string\">\"avoid\"</span>, <span class=\"hljs-comment\">//  (x) =&gt; &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span><br> <span class=\"hljs-string\">\"prettier.bracketSpacing\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 在对象，数组括号与文字之间加空格 \"&#123; foo: bar &#125;\"</span><br> <span class=\"hljs-string\">\"prettier.endOfLine\"</span>: <span class=\"hljs-string\">\"auto\"</span>, <span class=\"hljs-comment\">// 结尾是 \\n \\r \\n\\r auto</span><br> <span class=\"hljs-string\">\"prettier.htmlWhitespaceSensitivity\"</span>: <span class=\"hljs-string\">\"ignore\"</span>,<br> <span class=\"hljs-string\">\"prettier.ignorePath\"</span>: <span class=\"hljs-string\">\".prettierignore\"</span>, <span class=\"hljs-comment\">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span><br> <span class=\"hljs-string\">\"prettier.requireConfig\"</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Require a \"prettierconfig\" to format prettier</span><br> <span class=\"hljs-string\">\"prettier.trailingComma\"</span>: <span class=\"hljs-string\">\"none\"</span>, <span class=\"hljs-comment\">// 在对象或数组最后一个元素后面是否加逗号</span><br><br><span class=\"hljs-comment\">/* 每种语言默认的格式化规则 */</span><br> <span class=\"hljs-string\">\"[html]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[css]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[scss]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[javascript]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[vue]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[json]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 vuecli 创建项目时，不选择 lint 选项。<br><img src=\"/images/vuecli.png\" alt=\"vuecli\"></li>\n<li>在项目开发依赖中，加入@vue/cli-plugin-eslint、babel-eslint、eslint、eslint-plugin-vue、prettier、prettier-eslint 依赖<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">npm install @vue/cli-plugin-eslint  babel-eslint eslint eslint-plugin-vue prettier prettier-eslint  –-save-dev<br></code></pre></td></tr></table></figure></li>\n<li>在项目 package.json 内加入 lint 命令。<img src=\"/images/lint.png\" alt=\"图片4.png\"></li>\n<li>开发时，保存文件，即可按 prettier 规则格式化文件，并自动修复可修复的 issue，不能自动修复的，请根据提示，手动修复。</li>\n<li>提示：vscode 已设置保存时格式化，但有时并不会格式化文件。已保存的文件还存在报错的，请手动格式化，并修改相应问题后，再次保存。</li>\n<li>提交代码前，运行 npm run lint 代码风格检查，确认无误后再进行提交。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><blockquote>\n<p>&emsp;&emsp;在团队协作中，为避免低级 Bug、以及团队协作时不同代码风格对彼此造成的困扰与影响，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。EsLint 则是其中一个很好的工具。</p>\n<p>EsLint 提供以下支持：</p>\n<ul>\n<li>ES6</li>\n<li>AngularJS</li>\n<li>JSX</li>\n<li>Style 检查</li>\n<li>自定义错误和提示</li>\n</ul>\n<p>EsLint 提供以下几种校验：</p>\n<ul>\n<li>语法错误校验</li>\n<li>不重要或丢失的标点符号，如分号</li>\n<li>未被使用的参数提醒</li>\n<li>漏掉的结束符，如}</li>\n<li>确保样式的统一规则，如 sass 或者 less</li>\n<li>检查变量的命名</li>\n<li>影响性能的代码提醒，如 v-if 和 v-for 同时使用</li>\n</ul>\n</blockquote>\n<h3 id=\"2-eslint-配置\"><a href=\"#2-eslint-配置\" class=\"headerlink\" title=\"2.eslint 配置\"></a>2.eslint 配置</h3><h4 id=\"2-1-代码规范\"><a href=\"#2-1-代码规范\" class=\"headerlink\" title=\"2.1 代码规范\"></a>2.1 代码规范</h4><blockquote>\n<p>&emsp;&emsp;本项目基本规范是依托于 vue 官方的 <a href=\"https://github.com/vuejs/eslint-plugin-vue\" target=\"_blank\" rel=\"noopener\">eslint-plugin-vue</a>。并使用 Prettier 格式化代码，使样式与规则保持一致。</p>\n<p>.eslintrc.js 配置如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br><span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 当前配置为根配置，将不再从上级文件夹查找配置</span><br><span class=\"hljs-attr\">parserOptions</span>: &#123;<br>  <span class=\"hljs-attr\">parser</span>: <span class=\"hljs-string\">'babel-eslint'</span>,  <span class=\"hljs-comment\">// 采用 babel-eslint 作为语法解析器</span><br>  <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>,   <span class=\"hljs-comment\">// 指定来源的类型，有两种script或module</span><br>  <span class=\"hljs-attr\">ecmaVersion</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">//指定ECMAScript支持的版本，6为ES6</span><br>&#125;,<br><span class=\"hljs-attr\">env</span>: &#123;<br>  <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// 设置为所需检查的代码是在浏览器环境运行的</span><br>  <span class=\"hljs-attr\">es6</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// 设置所需检查代码为 es6 语法书写</span><br>&#125;,<br><span class=\"hljs-attr\">extends</span>: [<span class=\"hljs-string\">'plugin:vue/recommended'</span>, <span class=\"hljs-string\">'eslint:recommended'</span>],<span class=\"hljs-comment\">// 扩展使用 vue 检查规则和eslint推荐规则</span><br>  <span class=\"hljs-attr\">rules</span>: &#123;<br>    <span class=\"hljs-string\">'vue/attribute-hyphenation'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 忽略属性连字</span><br>    <span class=\"hljs-string\">'vue/max-attributes-per-line'</span>:[<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">singleline</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">multiline</span>: &#123; <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">allowFirstLine</span>: <span class=\"hljs-literal\">false</span> &#125; &#125;], <span class=\"hljs-comment\">// 每行最大属性</span><br>    <span class=\"hljs-string\">'vue/singleline-html-element-content-newline'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 单行html元素内容在新的一行</span><br>    <span class=\"hljs-string\">'vue/multiline-html-element-content-newline'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 多行html元素内容在新的一行</span><br>    <span class=\"hljs-string\">'vue/html-closing-bracket-newline'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// html右括号在新的一行</span><br>    <span class=\"hljs-string\">'vue/no-v-html'</span>: <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 不使用v-html</span><br>    <span class=\"hljs-string\">'vue/html-self-closing'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 忽略html标签自闭合</span><br>    <span class=\"hljs-string\">'accessor-pairs'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 应同时设置setter和getter</span><br>    <span class=\"hljs-string\">'arrow-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 箭头间距</span><br>    <span class=\"hljs-string\">'vue/require-default-prop'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 不检查默认属性</span><br>    <span class=\"hljs-string\">'vue/require-prop-types'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 不检查默认类型</span><br>    <span class=\"hljs-string\">'block-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>], <span class=\"hljs-comment\">// 块间距</span><br>    <span class=\"hljs-string\">'brace-style'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'1tbs'</span>, &#123; <span class=\"hljs-attr\">allowSingleLine</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 大括号样式允许单行</span><br>    <span class=\"hljs-string\">'camelcase'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">properties</span>: <span class=\"hljs-string\">'always'</span> &#125;], <span class=\"hljs-comment\">//为属性强制执行驼峰命名</span><br>    <span class=\"hljs-string\">'comma-dangle'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 逗号不使用悬挂</span><br>    <span class=\"hljs-string\">'comma-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 逗号间距</span><br>    <span class=\"hljs-string\">'comma-style'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'last'</span>], <span class=\"hljs-comment\">//（默认）与数组元素，对象属性或变量声明在同一行之后和同一行需要逗号</span><br>    <span class=\"hljs-string\">'constructor-super'</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-string\">'consistent-this'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'that'</span>], <span class=\"hljs-comment\">//强制this别名为that</span><br>    <span class=\"hljs-string\">'curly'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'multi-line'</span>], <span class=\"hljs-comment\">// 当一个块只包含一条语句时，不允许省略花括号。</span><br>    <span class=\"hljs-string\">'dot-location'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'property'</span>], <span class=\"hljs-comment\">//成员表达式中的点应与属性部分位于同一行</span><br>    <span class=\"hljs-string\">'eol-last'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 强制文件以换行符结束（LF）</span><br>    <span class=\"hljs-string\">'eqeqeq'</span>: [<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-string\">'always'</span>, &#123; <span class=\"hljs-attr\">null</span>: <span class=\"hljs-string\">'ignore'</span> &#125;], <span class=\"hljs-comment\">// 强制使用全等</span><br>    <span class=\"hljs-string\">'generator-star-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 生成器中'*'两侧都要有间距</span><br>    <span class=\"hljs-string\">'global-require'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 所有调用require()都位于模块的顶层</span><br>    <span class=\"hljs-string\">'indent'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">SwitchCase</span>: <span class=\"hljs-number\">2</span> &#125;], <span class=\"hljs-comment\">//缩进风格</span><br>    <span class=\"hljs-string\">'key-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">beforeColon</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">afterColon</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 强制在对象字面量属性中的键和值之间保持一致的间距</span><br>    <span class=\"hljs-string\">'keyword-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 关键字如if/function等的间距</span><br>    <span class=\"hljs-string\">'new-cap'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">newIsCap</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">capIsNew</span>: <span class=\"hljs-literal\">false</span> &#125;],<span class=\"hljs-comment\">// 允许在没有new操作符的情况下调用大写启动的函数;（默认）要求new使用大写启动函数调用所有操作符</span><br>    <span class=\"hljs-string\">'new-parens'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// JavaScript通过new关键字调用函数时允许省略括号</span><br>    <span class=\"hljs-string\">'no-array-constructor'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 不允许使用Array构造函数。除非要指定生成数组的长度</span><br>    <span class=\"hljs-string\">'no-console'</span>: process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span> ? <span class=\"hljs-string\">'error'</span> : <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 只有开发环境可以使用console</span><br>    <span class=\"hljs-string\">'no-class-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许修改类声明的变量</span><br>    <span class=\"hljs-string\">'no-const-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不能修改使用const关键字声明的变量</span><br>    <span class=\"hljs-string\">'no-control-regex'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 不允许正则表达式中的控制字符</span><br>    <span class=\"hljs-string\">'no-debugger'</span>: process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span> ? <span class=\"hljs-string\">'error'</span> : <span class=\"hljs-string\">'off'</span>, <span class=\"hljs-comment\">// 只有开发环境可以使用debugger</span><br>    <span class=\"hljs-string\">'no-delete-var'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在变量上使用delete操作符</span><br>    <span class=\"hljs-string\">'no-dupe-args'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在函数声明或表达式中使用重复的参数名称</span><br>    <span class=\"hljs-string\">'no-dupe-class-members'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在类成员中使用重复的参数名称</span><br>    <span class=\"hljs-string\">'no-dupe-keys'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在对象文字中使用重复键</span><br>    <span class=\"hljs-string\">'no-duplicate-case'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在switch语句的case子句中使用重复的测试表达式</span><br>    <span class=\"hljs-string\">'no-empty-character-class'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在正则表达式中使用空字符类</span><br>    <span class=\"hljs-string\">'no-empty-pattern'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许空块语句</span><br>    <span class=\"hljs-string\">'no-eval'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用eval</span><br>    <span class=\"hljs-string\">'no-ex-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在catch子句中重新分配例外</span><br>    <span class=\"hljs-string\">'no-extend-native'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许直接修改内建对象的原型</span><br>    <span class=\"hljs-string\">'no-extra-boolean-cast'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止不必要的布尔转换</span><br>    <span class=\"hljs-string\">'no-extra-parens'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'functions'</span>], <span class=\"hljs-comment\">// 仅在函数表达式附近禁止不必要的括号</span><br>    <span class=\"hljs-string\">'no-fallthrough'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除一个案件无意中掉到另一个案件</span><br>    <span class=\"hljs-string\">'no-floating-decimal'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除浮点小数点，并在数值有小数点但在其之前或之后缺少数字时发出警告</span><br>    <span class=\"hljs-string\">'no-func-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 允许重新分配function声明</span><br>    <span class=\"hljs-string\">'no-implied-eval'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除隐含eval()</span><br>    <span class=\"hljs-string\">'no-inner-declarations'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'functions'</span>], <span class=\"hljs-comment\">// 不允许function嵌套块中的声明</span><br>    <span class=\"hljs-string\">'no-invalid-regexp'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//不允许RegExp构造函数中的无效正则表达式字符串</span><br>    <span class=\"hljs-string\">'no-irregular-whitespace'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//捕获无效的空格</span><br>    <span class=\"hljs-string\">'no-iterator'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除阴影变量声明</span><br>    <span class=\"hljs-string\">'no-label-var'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//禁止创建与范围内的变量共享名称的标签</span><br>    <span class=\"hljs-string\">'no-labels'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">allowLoop</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">allowSwitch</span>: <span class=\"hljs-literal\">false</span> &#125;], <span class=\"hljs-comment\">// 消除 JavaScript 中使用带标签的语句</span><br>    <span class=\"hljs-string\">'no-lone-blocks'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//消除脚本顶层或其他块中不必要的和可能混淆的块</span><br>    <span class=\"hljs-string\">'no-mixed-spaces-and-tabs'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用混合空格和制表符进行缩进</span><br>    <span class=\"hljs-string\">'no-multi-spaces'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止在逻辑表达式，条件表达式，声明，数组元素，对象属性，序列和函数参数周围使用多个空格</span><br>    <span class=\"hljs-string\">'no-multi-str'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 防止使用多行字符串</span><br>    <span class=\"hljs-string\">'no-multiple-empty-lines'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">1</span> &#125;], <span class=\"hljs-comment\">// 最多一个空行</span><br>    <span class=\"hljs-string\">'no-native-reassign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许修改只读全局变量</span><br>    <span class=\"hljs-string\">'no-new-object'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用Object构造函数</span><br>    <span class=\"hljs-string\">'no-new-require'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除new require表达的使用</span><br>    <span class=\"hljs-string\">'no-new-symbol'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 防止Symbol与new 同时使用的意外错误</span><br>    <span class=\"hljs-string\">'no-new-wrappers'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 杜绝使用String，Number以及Boolean与new操作</span><br>    <span class=\"hljs-string\">'no-obj-calls'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许调用Math，JSON和Reflect对象作为功能</span><br>    <span class=\"hljs-string\">'no-octal'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许使用八进制文字</span><br>    <span class=\"hljs-string\">'no-octal-escape'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许字符串文字中的八进制转义序列</span><br>    <span class=\"hljs-string\">'no-path-concat'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 防止 Node.js 中的目录路径字符串连接无效</span><br>    <span class=\"hljs-string\">'no-redeclare'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除在同一范围内具有多个声明的变量</span><br>    <span class=\"hljs-string\">'no-regex-spaces'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 在正则表达式文字中不允许有多个空格</span><br>    <span class=\"hljs-string\">'no-return-assign'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'except-parens'</span>], <span class=\"hljs-comment\">// 消除return陈述中的任务，除非用括号括起来</span><br>    <span class=\"hljs-string\">'no-self-assign'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除自我分配</span><br>    <span class=\"hljs-string\">'no-self-compare'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止比较变量与自身</span><br>    <span class=\"hljs-string\">'no-sequences'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止使用逗号运算符</span><br>    <span class=\"hljs-string\">'no-sparse-arrays'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许稀疏数组文字</span><br>    <span class=\"hljs-string\">'no-this-before-super'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 在呼call前标记this/super关键字super()</span><br>    <span class=\"hljs-string\">'no-throw-literal'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许抛出不可能是Error对象的文字和其他表达式</span><br>    <span class=\"hljs-string\">'no-trailing-spaces'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许在行尾添加尾随空白</span><br>    <span class=\"hljs-string\">'no-undef'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 任何对未声明的变量的引用都会导致错误</span><br>    <span class=\"hljs-string\">'no-undef-init'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 消除初始化为undefined的变量声明</span><br>    <span class=\"hljs-string\">'no-underscore-dangle'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 标识符不能以_开头或结尾</span><br>    <span class=\"hljs-string\">'no-unexpected-multiline'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许混淆多行表达式</span><br>    <span class=\"hljs-string\">'no-unmodified-loop-condition'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 查找循环条件内的引用，然后检查这些引用的变量是否在循环中被修改</span><br>    <span class=\"hljs-string\">'no-unneeded-ternary'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">defaultAssignment</span>: <span class=\"hljs-literal\">false</span> &#125;], <span class=\"hljs-comment\">// 不允许将条件表达式作为默认的分配模式</span><br>    <span class=\"hljs-string\">'no-unreachable'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许可达代码return，throw，continue，和break语句后面还有语句。</span><br>    <span class=\"hljs-string\">'no-unsafe-finally'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 不允许return，throw，break，和continue里面的语句finally块</span><br>    <span class=\"hljs-string\">'no-unused-vars'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">vars</span>: <span class=\"hljs-string\">'all'</span>, <span class=\"hljs-attr\">args</span>: <span class=\"hljs-string\">'after-used'</span> &#125;],<br>    <span class=\"hljs-comment\">// 消除未使用的变量，函数和函数的参数</span><br>    <span class=\"hljs-comment\">// vars: 'all' 检查所有变量的使用情况，包括全局范围内的变量。这是默认设置。 args: 'after-used'  只有最后一个参数必须使用。例如，这允许您为函数使用两个命名参数，并且只要您使用第二个参数，ESLint 就不会警告您第一个参数。这是默认设置。</span><br>    <span class=\"hljs-string\">'no-useless-call'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 标记使用情况，Function.prototype.call()并且Function.prototype.apply()可以用正常的函数调用来替代</span><br>    <span class=\"hljs-string\">'no-useless-computed-key'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁止不必要地使用计算属性键</span><br>    <span class=\"hljs-string\">'no-useless-constructor'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 在不改变类的工作方式的情况下安全地移除的类构造函数</span><br>    <span class=\"hljs-string\">'no-useless-escape'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// 禁用不必要的转义字符</span><br>    <span class=\"hljs-string\">'no-whitespace-before-property'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 如果对象的属性位于同一行上，不允许围绕点或在开头括号之前留出空白</span><br>    <span class=\"hljs-string\">'no-with'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//禁用with</span><br>    <span class=\"hljs-string\">'no-var'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 禁用var</span><br>    <span class=\"hljs-string\">'one-var'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">initialized</span>: <span class=\"hljs-string\">'never'</span> &#125;], <span class=\"hljs-comment\">// 强制将变量声明为每个函数（对于var）或块（对于let和const）范围一起声明或单独声明。 initialized: 'never' 每个作用域要求多个变量声明用于初始化变量</span><br>    <span class=\"hljs-string\">'operator-linebreak'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'after'</span>, &#123; <span class=\"hljs-attr\">overrides</span>: &#123; <span class=\"hljs-string\">'?'</span>: <span class=\"hljs-string\">'before'</span>, <span class=\"hljs-string\">':'</span>: <span class=\"hljs-string\">'before'</span> &#125; &#125;], <span class=\"hljs-comment\">// 实施一致的换行</span><br>    <span class=\"hljs-string\">'padded-blocks'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 在块内强制执行一致的空行填充</span><br>    <span class=\"hljs-string\">'prefer-destructuring'</span>: [<span class=\"hljs-string\">'error'</span>, &#123; <span class=\"hljs-attr\">object</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">array</span>: <span class=\"hljs-literal\">false</span> &#125;], <span class=\"hljs-comment\">// 此规则强制使用解构而不是通过成员表达式访问属性。</span><br>    <span class=\"hljs-string\">'quotes'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'single'</span>, &#123; <span class=\"hljs-attr\">avoidEscape</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">allowTemplateLiterals</span>: <span class=\"hljs-literal\">true</span> &#125;],<span class=\"hljs-comment\">// avoidEscape: true 允许字符串使用单引号或双引号，只要字符串包含必须以其他方式转义的引号 ;allowTemplateLiterals: true 允许字符串使用反引号</span><br>    <span class=\"hljs-string\">'radix'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//parseInt必须指定第二个参数</span><br>    <span class=\"hljs-string\">'semi'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 不使用分号</span><br>    <span class=\"hljs-string\">'semi-spacing'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">before</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">after</span>: <span class=\"hljs-literal\">true</span> &#125;], <span class=\"hljs-comment\">// 强制分号间隔</span><br>    <span class=\"hljs-string\">'space-before-blocks'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>], <span class=\"hljs-comment\">// 块必须至少有一个先前的空间</span><br>    <span class=\"hljs-string\">'space-before-function-paren'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 在(参数后面不允许任何空格</span><br>    <span class=\"hljs-string\">'space-in-parens'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 禁止或要求（或）左边的一个或多个空格</span><br>    <span class=\"hljs-string\">'space-infix-ops'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 强制二元运算符左右各有一个空格</span><br>    <span class=\"hljs-string\">'space-unary-ops'</span>: [<span class=\"hljs-number\">2</span>, &#123; <span class=\"hljs-attr\">words</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">nonwords</span>: <span class=\"hljs-literal\">false</span> &#125;],<span class=\"hljs-comment\">//  words: true  如：new，delete，typeof，void，yield 左右必须有空格 //  nonwords: false  一元运算符，如：-，+，--，++，!，!!左右不能有空格</span><br>    <span class=\"hljs-string\">'spaced-comment'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>, &#123; <span class=\"hljs-attr\">markers</span>: [<span class=\"hljs-string\">'global'</span>, <span class=\"hljs-string\">'globals'</span>, <span class=\"hljs-string\">'eslint'</span>, <span class=\"hljs-string\">'eslint-disable'</span>, <span class=\"hljs-string\">'*package'</span>, <span class=\"hljs-string\">'!'</span>, <span class=\"hljs-string\">','</span>] &#125;], <span class=\"hljs-comment\">// 注释开始后，此规则将强制间距的一致性//或/*</span><br>    <span class=\"hljs-string\">'template-curly-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>], <span class=\"hljs-comment\">// 不允许大括号内的空格</span><br>    <span class=\"hljs-string\">'use-isnan'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//禁止比较时使用NaN，只能用isNaN()</span><br>    <span class=\"hljs-string\">'valid-typeof'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">//必须使用合法的typeof的值</span><br>    <span class=\"hljs-string\">'wrap-iife'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'any'</span>], <span class=\"hljs-comment\">//立即执行函数表达式的小括号风格</span><br>    <span class=\"hljs-string\">'yield-star-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'both'</span>], <span class=\"hljs-comment\">// 强制执行*周围 yield*表达式的间距，两侧都必须有空格</span><br>    <span class=\"hljs-string\">'yoda'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>],<br>    <span class=\"hljs-string\">'prefer-const'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 使用let关键字声明的变量，但在初始分配后从未重新分配变量，应改为const声明</span><br>    <span class=\"hljs-string\">'object-curly-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>, &#123; <span class=\"hljs-attr\">objectsInObjects</span>: <span class=\"hljs-literal\">false</span> &#125;],<span class=\"hljs-comment\">// 不允许以对象元素开始和/或以对象元素结尾的对象的大括号内的间距</span><br>    <span class=\"hljs-string\">'array-bracket-spacing'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>] <span class=\"hljs-comment\">// 不允许数组括号内的空格</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-eslint-安装与配置\"><a href=\"#2-2-eslint-安装与配置\" class=\"headerlink\" title=\"2.2 eslint 安装与配置\"></a>2.2 eslint 安装与配置</h4><ul>\n<li>全局安装 eslint<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">npm install -g eslint<br></code></pre></td></tr></table></figure></li>\n<li>全局安装 Prettier<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">npm install -g prettier<br></code></pre></td></tr></table></figure></li>\n<li>vscode 插件市场搜索 eslint 和 prettier,下载并安装。<br><img src=\"/images/eslint.png\" alt=\"图片1.png\"><br><img src=\"/images/prettier.png\" alt=\"图片2.png\"></li>\n<li>vscode 编辑器 setting.json 中加如下配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/* 开启保存时自动格式化 */</span><br><span class=\"hljs-string\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>,<br><br><span class=\"hljs-comment\">/* eslint的配置 */</span><br><span class=\"hljs-string\">\"eslint.enable\"</span>: <span class=\"hljs-literal\">true</span>,<br><span class=\"hljs-string\">\"eslint.run\"</span>: <span class=\"hljs-string\">\"onSave\"</span>,<br><span class=\"hljs-string\">\"eslint.options\"</span>: &#123;<br>   <span class=\"hljs-string\">\"extensions\"</span>: [<br>     <span class=\"hljs-string\">\".js\"</span>,<br>     <span class=\"hljs-string\">\".vue\"</span><br>   ]<br> &#125;,<br> <span class=\"hljs-string\">\"editor.codeActionsOnSave\"</span>: &#123;<br>   <span class=\"hljs-string\">\"source.fixAll.eslint\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 保存时自动修复</span><br> &#125;,<br> <span class=\"hljs-comment\">// 关闭 vscode 默认的检查工具</span><br> <span class=\"hljs-string\">\"html.validate.scripts\"</span>: <span class=\"hljs-literal\">false</span>,<br> <span class=\"hljs-string\">\"javascript.validate.enable\"</span>: <span class=\"hljs-literal\">false</span>,<br> <span class=\"hljs-string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"hljs-literal\">true</span>,<br> <span class=\"hljs-string\">\"eslint.format.enable\"</span>: <span class=\"hljs-literal\">true</span>,<br> <span class=\"hljs-string\">\"scss.lint.duplicateProperties\"</span>: <span class=\"hljs-string\">\"error\"</span>,<br> <span class=\"hljs-string\">\"css.lint.duplicateProperties\"</span>: <span class=\"hljs-string\">\"error\"</span>,<br> <span class=\"hljs-string\">\"less.lint.zeroUnits\"</span>: <span class=\"hljs-string\">\"error\"</span>,<br> <span class=\"hljs-string\">\"eslint.validate\"</span>: [<br>   <span class=\"hljs-string\">\"javascript\"</span>,<br>   <span class=\"hljs-string\">\"javascriptreact\"</span>,<br>   <span class=\"hljs-string\">\"vue-html\"</span>,<br>   <span class=\"hljs-string\">\"vue\"</span>,<br>   <span class=\"hljs-string\">\"html\"</span><br> ],<br><br><span class=\"hljs-comment\">/*  prettier的配置 */</span><br> <span class=\"hljs-string\">\"prettier.printWidth\"</span>: <span class=\"hljs-number\">120</span>, <span class=\"hljs-comment\">// 超过最大值换行</span><br> <span class=\"hljs-string\">\"prettier.tabWidth\"</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 缩进字节数</span><br> <span class=\"hljs-string\">\"prettier.useTabs\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 缩进使用tab</span><br> <span class=\"hljs-string\">\"prettier.semi\"</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 句尾添加分号</span><br> <span class=\"hljs-string\">\"prettier.singleQuote\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 使用单引号代替双引号</span><br> <span class=\"hljs-string\">\"prettier.proseWrap\"</span>: <span class=\"hljs-string\">\"preserve\"</span>, <span class=\"hljs-comment\">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span><br> <span class=\"hljs-string\">\"prettier.arrowParens\"</span>: <span class=\"hljs-string\">\"avoid\"</span>, <span class=\"hljs-comment\">//  (x) =&gt; &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span><br> <span class=\"hljs-string\">\"prettier.bracketSpacing\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 在对象，数组括号与文字之间加空格 \"&#123; foo: bar &#125;\"</span><br> <span class=\"hljs-string\">\"prettier.endOfLine\"</span>: <span class=\"hljs-string\">\"auto\"</span>, <span class=\"hljs-comment\">// 结尾是 \\n \\r \\n\\r auto</span><br> <span class=\"hljs-string\">\"prettier.htmlWhitespaceSensitivity\"</span>: <span class=\"hljs-string\">\"ignore\"</span>,<br> <span class=\"hljs-string\">\"prettier.ignorePath\"</span>: <span class=\"hljs-string\">\".prettierignore\"</span>, <span class=\"hljs-comment\">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span><br> <span class=\"hljs-string\">\"prettier.requireConfig\"</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Require a \"prettierconfig\" to format prettier</span><br> <span class=\"hljs-string\">\"prettier.trailingComma\"</span>: <span class=\"hljs-string\">\"none\"</span>, <span class=\"hljs-comment\">// 在对象或数组最后一个元素后面是否加逗号</span><br><br><span class=\"hljs-comment\">/* 每种语言默认的格式化规则 */</span><br> <span class=\"hljs-string\">\"[html]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[css]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[scss]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[javascript]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[vue]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br> <span class=\"hljs-string\">\"[json]\"</span>: &#123;<br>   <span class=\"hljs-string\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"esbenp.prettier-vscode\"</span><br> &#125;,<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 vuecli 创建项目时，不选择 lint 选项。<br><img src=\"/images/vuecli.png\" alt=\"vuecli\"></li>\n<li>在项目开发依赖中，加入@vue/cli-plugin-eslint、babel-eslint、eslint、eslint-plugin-vue、prettier、prettier-eslint 依赖<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">npm install @vue/cli-plugin-eslint  babel-eslint eslint eslint-plugin-vue prettier prettier-eslint  –-save-dev<br></code></pre></td></tr></table></figure></li>\n<li>在项目 package.json 内加入 lint 命令。<img src=\"/images/lint.png\" alt=\"图片4.png\"></li>\n<li>开发时，保存文件，即可按 prettier 规则格式化文件，并自动修复可修复的 issue，不能自动修复的，请根据提示，手动修复。</li>\n<li>提示：vscode 已设置保存时格式化，但有时并不会格式化文件。已保存的文件还存在报错的，请手动格式化，并修改相应问题后，再次保存。</li>\n<li>提交代码前，运行 npm run lint 代码风格检查，确认无误后再进行提交。</li>\n</ul>\n"},{"_content":"### 1.前言\n\n> 在 web 页面开发中，常常会有这样的需求：<br>\n>\n> &emsp;&emsp;**在当前页面内打开一个外部页面。**<br>\n>\n> &emsp;&emsp;如果仅仅是跳转到外部页面，对于有经验的开发者来说，应该没有什么难度。但常常，需要打开的页面仅仅是当前已有页面的一部分，即需要嵌套到当前页面内，往往就不太好实现了。\n\n### 2.解决方案\n\n使用 **iframe** 加载外部页面。\n\nhtml 页面内嵌套 iframe，并将 iframe 的 src 属性绑定为目标外部页面链接。\n\n```html\n <div id=\"iframe-container\">\n      <iframe :src=\"iframeSrc\" scrolling=\"auto\" frameborder=\"0\" id=\"iframe\"></iframe>\n  </div>\n```\n\n### 3.示例\n\n**需求：** 点击电商导航内菜单，打开相应页面，在新开页面中，显示页面加载状态，可以回退和直接关闭新开页面。\n\n![iframe-example.png](/images/iframe-example.png)\n\n**分析：**\n\n- 图一和图二顶部样式不一致，因此，是两个独立的组件。\n- 点击图一页面中的菜单，跳转到图二页面，需要配置路由。\n- 如何传递外部页面的地址？路由传参？vuex?\n\n**实现：**\n\n&emsp;&emsp;Tips： 本例基于 vue + vue-router + vuex + vant 实现\n<br>\n\n图一页面布局：\n\n```html\n <div class=\"module-box\">\n      <div class=\"module-title\">电商导航</div>\n      <van-grid :column-num=\"3\">\n          <van-grid-item v-for=\"(item,index) in eShopNavItems\"\n                         :key=\"index\"\n                         :icon=\"item.iconPath\"\n                         :text=\"item.name\"\n                         @click=\"gotoPage(item.path)\" />\n      </van-grid>\n </div>\n```\n\njs 部分：\n\n```javascript\n<script>\nexport default {\n  components: {},\n  props: {},\n  data() {\n    return {\n      eShopNavItems: [\n        {\n          name: '京东',\n          iconPath: require('../../../assets/images/lifeServices/index/jd.png'),\n          path: '/home/lifeServices/jd',\n        },\n        // 其他菜单配置 \n      ]\n    }\n  },\n  methods: {\n    onClickLeft() {\n      this.$router.go(-1)\n    },\n\n    gotoPage(path) {\n      this.$router.push(path)\n\n      // 存储目标外链的url及要显示的标题 \n      // 这部分写在路由配置里的meta参数下\n\n      this.$store.state.iframeSrc = this.$route.meta.link\n      this.$store.state.iframeTitle = this.$route.meta.title\n    }\n  }\n}\n</script>\n\n```\n\n路由配置：\n\n```javascript\nconst routes = [{\n  path: '/home/lifeServices/externalLink',\n  name: 'externalLink',\n  component: LinkHome,\n  children: [\n    {\n      path: '/home/lifeServices/jd',\n      meta: {\n        link: 'https://m.jd.com/',\n        title: '京东(jd.com)'\n      }\n    },\n];\n```\n\n接下来关键的实现，也是最核心的点在于“LinkHome”组件的实现。\n\nLinkHome.vue\n\n```js\n<template>\n  <div class=\"link-home\">\n    <div class=\"header\">\n      <van-nav-bar\n        :title=\"$store.state.iframeTitle\"\n        left-arrow\n        @click-left=\"onClickLeft\"\n      ></van-nav-bar>\n      <van-icon name=\"cross\" class=\"close\" @click=\"closeTab\" />\n    </div>\n\n    <div id=\"iframe-container\">\n      <iframe :src=\"$store.state.iframeSrc\" scrolling=\"auto\" frameborder=\"0\" id=\"iframe\"></iframe>\n    </div>\n  </div>\n</template>\n\n<script>\nimport NProgress from 'nprogress'\n\nexport default {\n  mounted() {\n    let iframe = document.getElementById('iframe')\n    NProgress.start()\n\n    iframe.onload = function() {\n      NProgress.done()\n    }\n  },\n  methods: {\n    onClickLeft() {\n      this.$router.go(-1)\n      NProgress.done()\n    },\n\n    closeTab() {\n      this.$router.replace('/home/lifeServices/index')\n      NProgress.done()\n    }\n  }\n}\n</script>\n\n // css样式省略\n\n```\n\n给 iframe 的 src 属性绑定值，且为目标外部页面地址。即可嵌套加载外部页面。\n\n页面加载状态使用[NProgress](https://github.com/rstacruz/nprogress)。\n\n在 vue.js 的 mounted 生命周期内，开始加载进度条。\n\n```javascript\nNProgress.start()\n```\n\n获取 iframe 元素，当 iframe 页面加载完成后，关闭进度条。\n\n```javascript\niframe.onload = function() {\n  NProgress.done()\n}\n```\n\n当后退或者关闭当前页面时，也应该一并关闭进度条提示。因为当页面还没有加载完时，后退或者关闭页面，将会导致进度条一直存在。\n\n**特别提示:** 关闭页面，即回到主页时，应使用 **`this.$router.replace`** 而不是 `this.$router.push`，这两个同样是跳转到指定的 url，但是 `this.$router.replace` 不会向 history 里面添加新的记录。回到主页，再后退，应该是回到进入主页的上一个页面，而不是刚才打开的外部页面。\n","source":"_posts/vue 组件内嵌套外部页面的实现与案例分享.md","raw":"### 1.前言\n\n> 在 web 页面开发中，常常会有这样的需求：<br>\n>\n> &emsp;&emsp;**在当前页面内打开一个外部页面。**<br>\n>\n> &emsp;&emsp;如果仅仅是跳转到外部页面，对于有经验的开发者来说，应该没有什么难度。但常常，需要打开的页面仅仅是当前已有页面的一部分，即需要嵌套到当前页面内，往往就不太好实现了。\n\n### 2.解决方案\n\n使用 **iframe** 加载外部页面。\n\nhtml 页面内嵌套 iframe，并将 iframe 的 src 属性绑定为目标外部页面链接。\n\n```html\n <div id=\"iframe-container\">\n      <iframe :src=\"iframeSrc\" scrolling=\"auto\" frameborder=\"0\" id=\"iframe\"></iframe>\n  </div>\n```\n\n### 3.示例\n\n**需求：** 点击电商导航内菜单，打开相应页面，在新开页面中，显示页面加载状态，可以回退和直接关闭新开页面。\n\n![iframe-example.png](/images/iframe-example.png)\n\n**分析：**\n\n- 图一和图二顶部样式不一致，因此，是两个独立的组件。\n- 点击图一页面中的菜单，跳转到图二页面，需要配置路由。\n- 如何传递外部页面的地址？路由传参？vuex?\n\n**实现：**\n\n&emsp;&emsp;Tips： 本例基于 vue + vue-router + vuex + vant 实现\n<br>\n\n图一页面布局：\n\n```html\n <div class=\"module-box\">\n      <div class=\"module-title\">电商导航</div>\n      <van-grid :column-num=\"3\">\n          <van-grid-item v-for=\"(item,index) in eShopNavItems\"\n                         :key=\"index\"\n                         :icon=\"item.iconPath\"\n                         :text=\"item.name\"\n                         @click=\"gotoPage(item.path)\" />\n      </van-grid>\n </div>\n```\n\njs 部分：\n\n```javascript\n<script>\nexport default {\n  components: {},\n  props: {},\n  data() {\n    return {\n      eShopNavItems: [\n        {\n          name: '京东',\n          iconPath: require('../../../assets/images/lifeServices/index/jd.png'),\n          path: '/home/lifeServices/jd',\n        },\n        // 其他菜单配置 \n      ]\n    }\n  },\n  methods: {\n    onClickLeft() {\n      this.$router.go(-1)\n    },\n\n    gotoPage(path) {\n      this.$router.push(path)\n\n      // 存储目标外链的url及要显示的标题 \n      // 这部分写在路由配置里的meta参数下\n\n      this.$store.state.iframeSrc = this.$route.meta.link\n      this.$store.state.iframeTitle = this.$route.meta.title\n    }\n  }\n}\n</script>\n\n```\n\n路由配置：\n\n```javascript\nconst routes = [{\n  path: '/home/lifeServices/externalLink',\n  name: 'externalLink',\n  component: LinkHome,\n  children: [\n    {\n      path: '/home/lifeServices/jd',\n      meta: {\n        link: 'https://m.jd.com/',\n        title: '京东(jd.com)'\n      }\n    },\n];\n```\n\n接下来关键的实现，也是最核心的点在于“LinkHome”组件的实现。\n\nLinkHome.vue\n\n```js\n<template>\n  <div class=\"link-home\">\n    <div class=\"header\">\n      <van-nav-bar\n        :title=\"$store.state.iframeTitle\"\n        left-arrow\n        @click-left=\"onClickLeft\"\n      ></van-nav-bar>\n      <van-icon name=\"cross\" class=\"close\" @click=\"closeTab\" />\n    </div>\n\n    <div id=\"iframe-container\">\n      <iframe :src=\"$store.state.iframeSrc\" scrolling=\"auto\" frameborder=\"0\" id=\"iframe\"></iframe>\n    </div>\n  </div>\n</template>\n\n<script>\nimport NProgress from 'nprogress'\n\nexport default {\n  mounted() {\n    let iframe = document.getElementById('iframe')\n    NProgress.start()\n\n    iframe.onload = function() {\n      NProgress.done()\n    }\n  },\n  methods: {\n    onClickLeft() {\n      this.$router.go(-1)\n      NProgress.done()\n    },\n\n    closeTab() {\n      this.$router.replace('/home/lifeServices/index')\n      NProgress.done()\n    }\n  }\n}\n</script>\n\n // css样式省略\n\n```\n\n给 iframe 的 src 属性绑定值，且为目标外部页面地址。即可嵌套加载外部页面。\n\n页面加载状态使用[NProgress](https://github.com/rstacruz/nprogress)。\n\n在 vue.js 的 mounted 生命周期内，开始加载进度条。\n\n```javascript\nNProgress.start()\n```\n\n获取 iframe 元素，当 iframe 页面加载完成后，关闭进度条。\n\n```javascript\niframe.onload = function() {\n  NProgress.done()\n}\n```\n\n当后退或者关闭当前页面时，也应该一并关闭进度条提示。因为当页面还没有加载完时，后退或者关闭页面，将会导致进度条一直存在。\n\n**特别提示:** 关闭页面，即回到主页时，应使用 **`this.$router.replace`** 而不是 `this.$router.push`，这两个同样是跳转到指定的 url，但是 `this.$router.replace` 不会向 history 里面添加新的记录。回到主页，再后退，应该是回到进入主页的上一个页面，而不是刚才打开的外部页面。\n","slug":"vue 组件内嵌套外部页面的实现与案例分享","published":1,"date":"2020-01-20T08:47:09.044Z","updated":"2020-01-21T07:35:23.135Z","title":"vue 组件内嵌套外部页面的实现与案例分享","_id":"ck5njk9ui0002l4w22hyq1sho","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><blockquote>\n<p>在 web 页面开发中，常常会有这样的需求：<br></p>\n<p>&emsp;&emsp;<strong>在当前页面内打开一个外部页面。</strong><br></p>\n<p>&emsp;&emsp;如果仅仅是跳转到外部页面，对于有经验的开发者来说，应该没有什么难度。但常常，需要打开的页面仅仅是当前已有页面的一部分，即需要嵌套到当前页面内，往往就不太好实现了。</p>\n</blockquote>\n<h3 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h3><p>使用 <strong>iframe</strong> 加载外部页面。</p>\n<p>html 页面内嵌套 iframe，并将 iframe 的 src 属性绑定为目标外部页面链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe-container\"</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"iframeSrc\"</span> <span class=\"hljs-attr\">scrolling</span>=<span class=\"hljs-string\">\"auto\"</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3.示例\"></a>3.示例</h3><p><strong>需求：</strong> 点击电商导航内菜单，打开相应页面，在新开页面中，显示页面加载状态，可以回退和直接关闭新开页面。</p>\n<p><img src=\"/images/iframe-example.png\" alt=\"iframe-example.png\"></p>\n<p><strong>分析：</strong></p>\n<ul>\n<li>图一和图二顶部样式不一致，因此，是两个独立的组件。</li>\n<li>点击图一页面中的菜单，跳转到图二页面，需要配置路由。</li>\n<li>如何传递外部页面的地址？路由传参？vuex?</li>\n</ul>\n<p><strong>实现：</strong></p>\n<p>&emsp;&emsp;Tips： 本例基于 vue + vue-router + vuex + vant 实现<br><br></p>\n<p>图一页面布局：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"module-box\"</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"module-title\"</span>&gt;</span>电商导航<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-grid</span> <span class=\"hljs-attr\">:column-num</span>=<span class=\"hljs-string\">\"3\"</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-grid-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in eShopNavItems\"</span><br>                        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span><br>                        <span class=\"hljs-attr\">:icon</span>=<span class=\"hljs-string\">\"item.iconPath\"</span><br>                        <span class=\"hljs-attr\">:text</span>=<span class=\"hljs-string\">\"item.name\"</span><br>                        @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"gotoPage(item.path)\"</span> /&gt;</span><br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">van-grid</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>js 部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-attr\">components</span>: &#123;&#125;,<br>  <span class=\"hljs-attr\">props</span>: &#123;&#125;,<br>  data() &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">eShopNavItems</span>: [<br>        &#123;<br>          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'京东'</span>,<br>          <span class=\"hljs-attr\">iconPath</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../../assets/images/lifeServices/index/jd.png'</span>),<br>          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/home/lifeServices/jd'</span>,<br>        &#125;,<br>        <span class=\"hljs-comment\">// 其他菜单配置 </span><br>      ]<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    onClickLeft() &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.go(<span class=\"hljs-number\">-1</span>)<br>    &#125;,<br><br>    gotoPage(path) &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.push(path)<br><br>      <span class=\"hljs-comment\">// 存储目标外链的url及要显示的标题 </span><br>      <span class=\"hljs-comment\">// 这部分写在路由配置里的meta参数下</span><br><br>      <span class=\"hljs-keyword\">this</span>.$store.state.iframeSrc = <span class=\"hljs-keyword\">this</span>.$route.meta.link<br>      <span class=\"hljs-keyword\">this</span>.$store.state.iframeTitle = <span class=\"hljs-keyword\">this</span>.$route.meta.title<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;<span class=\"hljs-regexp\">/script&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>路由配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> routes = [&#123;<br>  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/home/lifeServices/externalLink'</span>,<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'externalLink'</span>,<br>  <span class=\"hljs-attr\">component</span>: LinkHome,<br>  <span class=\"hljs-attr\">children</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/home/lifeServices/jd'</span>,<br>      <span class=\"hljs-attr\">meta</span>: &#123;<br>        <span class=\"hljs-attr\">link</span>: <span class=\"hljs-string\">'https://m.jd.com/'</span>,<br>        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'京东(jd.com)'</span><br>      &#125;<br>    &#125;,<br>];<br></code></pre></td></tr></table></figure>\n\n<p>接下来关键的实现，也是最核心的点在于“LinkHome”组件的实现。</p>\n<p>LinkHome.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"link-home\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-nav-bar</span><br>        <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"$store.state.iframeTitle\"</span><br>        <span class=\"hljs-attr\">left-arrow</span><br>        @<span class=\"hljs-attr\">click-left</span>=<span class=\"hljs-string\">\"onClickLeft\"</span><br>      &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">van-nav-bar</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cross\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"close\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"closeTab\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe-container\"</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"$store.state.iframeSrc\"</span> <span class=\"hljs-attr\">scrolling</span>=<span class=\"hljs-string\">\"auto\"</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><br><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br><span class=\"hljs-keyword\">import</span> NProgress <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'nprogress'</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  mounted() &#123;<br>    <span class=\"hljs-keyword\">let</span> iframe = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'iframe'</span>)<br>    NProgress.start()<br><br>    iframe.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      NProgress.done()<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    onClickLeft() &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.go(<span class=\"hljs-number\">-1</span>)<br>      NProgress.done()<br>    &#125;,<br><br>    closeTab() &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.replace(<span class=\"hljs-string\">'/home/lifeServices/index'</span>)<br>      NProgress.done()<br>    &#125;<br>  &#125;<br>&#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><br> <span class=\"hljs-comment\">// css样式省略</span><br></code></pre></td></tr></table></figure>\n\n<p>给 iframe 的 src 属性绑定值，且为目标外部页面地址。即可嵌套加载外部页面。</p>\n<p>页面加载状态使用<a href=\"https://github.com/rstacruz/nprogress\" target=\"_blank\" rel=\"noopener\">NProgress</a>。</p>\n<p>在 vue.js 的 mounted 生命周期内，开始加载进度条。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">NProgress.start()<br></code></pre></td></tr></table></figure>\n\n<p>获取 iframe 元素，当 iframe 页面加载完成后，关闭进度条。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">iframe.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  NProgress.done()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当后退或者关闭当前页面时，也应该一并关闭进度条提示。因为当页面还没有加载完时，后退或者关闭页面，将会导致进度条一直存在。</p>\n<p><strong>特别提示:</strong> 关闭页面，即回到主页时，应使用 <strong><code>this.$router.replace</code></strong> 而不是 <code>this.$router.push</code>，这两个同样是跳转到指定的 url，但是 <code>this.$router.replace</code> 不会向 history 里面添加新的记录。回到主页，再后退，应该是回到进入主页的上一个页面，而不是刚才打开的外部页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><blockquote>\n<p>在 web 页面开发中，常常会有这样的需求：<br></p>\n<p>&emsp;&emsp;<strong>在当前页面内打开一个外部页面。</strong><br></p>\n<p>&emsp;&emsp;如果仅仅是跳转到外部页面，对于有经验的开发者来说，应该没有什么难度。但常常，需要打开的页面仅仅是当前已有页面的一部分，即需要嵌套到当前页面内，往往就不太好实现了。</p>\n</blockquote>\n<h3 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h3><p>使用 <strong>iframe</strong> 加载外部页面。</p>\n<p>html 页面内嵌套 iframe，并将 iframe 的 src 属性绑定为目标外部页面链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe-container\"</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"iframeSrc\"</span> <span class=\"hljs-attr\">scrolling</span>=<span class=\"hljs-string\">\"auto\"</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3.示例\"></a>3.示例</h3><p><strong>需求：</strong> 点击电商导航内菜单，打开相应页面，在新开页面中，显示页面加载状态，可以回退和直接关闭新开页面。</p>\n<p><img src=\"/images/iframe-example.png\" alt=\"iframe-example.png\"></p>\n<p><strong>分析：</strong></p>\n<ul>\n<li>图一和图二顶部样式不一致，因此，是两个独立的组件。</li>\n<li>点击图一页面中的菜单，跳转到图二页面，需要配置路由。</li>\n<li>如何传递外部页面的地址？路由传参？vuex?</li>\n</ul>\n<p><strong>实现：</strong></p>\n<p>&emsp;&emsp;Tips： 本例基于 vue + vue-router + vuex + vant 实现<br><br></p>\n<p>图一页面布局：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"module-box\"</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"module-title\"</span>&gt;</span>电商导航<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-grid</span> <span class=\"hljs-attr\">:column-num</span>=<span class=\"hljs-string\">\"3\"</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-grid-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in eShopNavItems\"</span><br>                        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span><br>                        <span class=\"hljs-attr\">:icon</span>=<span class=\"hljs-string\">\"item.iconPath\"</span><br>                        <span class=\"hljs-attr\">:text</span>=<span class=\"hljs-string\">\"item.name\"</span><br>                        @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"gotoPage(item.path)\"</span> /&gt;</span><br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">van-grid</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>js 部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-attr\">components</span>: &#123;&#125;,<br>  <span class=\"hljs-attr\">props</span>: &#123;&#125;,<br>  data() &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">eShopNavItems</span>: [<br>        &#123;<br>          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'京东'</span>,<br>          <span class=\"hljs-attr\">iconPath</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../../assets/images/lifeServices/index/jd.png'</span>),<br>          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/home/lifeServices/jd'</span>,<br>        &#125;,<br>        <span class=\"hljs-comment\">// 其他菜单配置 </span><br>      ]<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    onClickLeft() &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.go(<span class=\"hljs-number\">-1</span>)<br>    &#125;,<br><br>    gotoPage(path) &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.push(path)<br><br>      <span class=\"hljs-comment\">// 存储目标外链的url及要显示的标题 </span><br>      <span class=\"hljs-comment\">// 这部分写在路由配置里的meta参数下</span><br><br>      <span class=\"hljs-keyword\">this</span>.$store.state.iframeSrc = <span class=\"hljs-keyword\">this</span>.$route.meta.link<br>      <span class=\"hljs-keyword\">this</span>.$store.state.iframeTitle = <span class=\"hljs-keyword\">this</span>.$route.meta.title<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;<span class=\"hljs-regexp\">/script&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>路由配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> routes = [&#123;<br>  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/home/lifeServices/externalLink'</span>,<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'externalLink'</span>,<br>  <span class=\"hljs-attr\">component</span>: LinkHome,<br>  <span class=\"hljs-attr\">children</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/home/lifeServices/jd'</span>,<br>      <span class=\"hljs-attr\">meta</span>: &#123;<br>        <span class=\"hljs-attr\">link</span>: <span class=\"hljs-string\">'https://m.jd.com/'</span>,<br>        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'京东(jd.com)'</span><br>      &#125;<br>    &#125;,<br>];<br></code></pre></td></tr></table></figure>\n\n<p>接下来关键的实现，也是最核心的点在于“LinkHome”组件的实现。</p>\n<p>LinkHome.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"link-home\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-nav-bar</span><br>        <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"$store.state.iframeTitle\"</span><br>        <span class=\"hljs-attr\">left-arrow</span><br>        @<span class=\"hljs-attr\">click-left</span>=<span class=\"hljs-string\">\"onClickLeft\"</span><br>      &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">van-nav-bar</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">van-icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cross\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"close\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"closeTab\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe-container\"</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"$store.state.iframeSrc\"</span> <span class=\"hljs-attr\">scrolling</span>=<span class=\"hljs-string\">\"auto\"</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><br><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br><span class=\"hljs-keyword\">import</span> NProgress <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'nprogress'</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  mounted() &#123;<br>    <span class=\"hljs-keyword\">let</span> iframe = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'iframe'</span>)<br>    NProgress.start()<br><br>    iframe.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      NProgress.done()<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    onClickLeft() &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.go(<span class=\"hljs-number\">-1</span>)<br>      NProgress.done()<br>    &#125;,<br><br>    closeTab() &#123;<br>      <span class=\"hljs-keyword\">this</span>.$router.replace(<span class=\"hljs-string\">'/home/lifeServices/index'</span>)<br>      NProgress.done()<br>    &#125;<br>  &#125;<br>&#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><br> <span class=\"hljs-comment\">// css样式省略</span><br></code></pre></td></tr></table></figure>\n\n<p>给 iframe 的 src 属性绑定值，且为目标外部页面地址。即可嵌套加载外部页面。</p>\n<p>页面加载状态使用<a href=\"https://github.com/rstacruz/nprogress\" target=\"_blank\" rel=\"noopener\">NProgress</a>。</p>\n<p>在 vue.js 的 mounted 生命周期内，开始加载进度条。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">NProgress.start()<br></code></pre></td></tr></table></figure>\n\n<p>获取 iframe 元素，当 iframe 页面加载完成后，关闭进度条。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">iframe.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  NProgress.done()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当后退或者关闭当前页面时，也应该一并关闭进度条提示。因为当页面还没有加载完时，后退或者关闭页面，将会导致进度条一直存在。</p>\n<p><strong>特别提示:</strong> 关闭页面，即回到主页时，应使用 <strong><code>this.$router.replace</code></strong> 而不是 <code>this.$router.push</code>，这两个同样是跳转到指定的 url，但是 <code>this.$router.replace</code> 不会向 history 里面添加新的记录。回到主页，再后退，应该是回到进入主页的上一个页面，而不是刚才打开的外部页面。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}